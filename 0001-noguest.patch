From 590880a6677911e29b578f8740e613d1fa2cba36 Mon Sep 17 00:00:00 2001
From: matthewdlang18 <85465968+matthewdlang18@users.noreply.github.com>
Date: Fri, 16 May 2025 20:38:46 -0700
Subject: [PATCH] noguest

---
 activities/econ-words-new/README.md           |  64 ++
 activities/econ-words-new/css/econ-words.css  | 394 +++++++++++
 activities/econ-words-new/data/econ-terms.csv | 127 ++++
 activities/econ-words-new/game.html           | 283 ++++++++
 activities/econ-words-new/index.html          | 162 +++++
 activities/econ-words-new/js/auth.js          | 169 +++++
 activities/econ-words-new/js/database.js      | 311 +++++++++
 activities/econ-words-new/js/env.js           |  14 +
 activities/econ-words-new/js/game.js          | 612 ++++++++++++++++++
 activities/econ-words-new/js/leaderboard.js   | 223 +++++++
 .../econ-words-new/js/supabase-client.js      |  41 ++
 activities/econ-words-new/js/terms-data.js    | 195 ++++++
 activities/econ-words/debug.html              |  92 ++-
 activities/econ-words/js/auth.js              |  31 +-
 activities/econ-words/js/database.js          | 374 ++++++-----
 activities/econ-words/js/local-env.js         |  15 +
 .../econ-words/js/supabase-diagnostics.js     |  63 +-
 activities/econ-words/js/supabase-init.js     | 252 ++++++++
 18 files changed, 3231 insertions(+), 191 deletions(-)
 create mode 100644 activities/econ-words-new/README.md
 create mode 100644 activities/econ-words-new/css/econ-words.css
 create mode 100644 activities/econ-words-new/data/econ-terms.csv
 create mode 100644 activities/econ-words-new/game.html
 create mode 100644 activities/econ-words-new/index.html
 create mode 100644 activities/econ-words-new/js/auth.js
 create mode 100644 activities/econ-words-new/js/database.js
 create mode 100644 activities/econ-words-new/js/env.js
 create mode 100644 activities/econ-words-new/js/game.js
 create mode 100644 activities/econ-words-new/js/leaderboard.js
 create mode 100644 activities/econ-words-new/js/supabase-client.js
 create mode 100644 activities/econ-words-new/js/terms-data.js
 create mode 100644 activities/econ-words/js/local-env.js
 create mode 100644 activities/econ-words/js/supabase-init.js

diff --git a/activities/econ-words-new/README.md b/activities/econ-words-new/README.md
new file mode 100644
index 0000000..92e2e37
--- /dev/null
+++ b/activities/econ-words-new/README.md
@@ -0,0 +1,64 @@
+# Econ Words Game
+
+This is a reimplemented version of the Econ Words game with proper Supabase integration.
+
+## Architecture
+
+The game has been rebuilt with a clean, modular architecture:
+
+### Core Files
+
+- `game.html` - Main game page
+- `css/econ-words.css` - Game styling
+
+### JavaScript Modules
+
+- `js/env.js` - Environment variables for Supabase
+- `js/supabase-client.js` - Supabase client initialization
+- `js/auth.js` - Authentication handling
+- `js/database.js` - Database operations (leaderboard, user stats)
+- `js/game.js` - Core game logic
+- `js/leaderboard.js` - Leaderboard functionality
+- `js/terms-data.js` - Economics terms data
+
+### Data Files
+
+- `data/econ-terms.csv` - CSV file containing economics terms, hints, and definitions
+
+## Database Integration
+
+The game integrates with two Supabase tables:
+
+1. `econ_terms_leaderboard` - Stores game scores
+   - `user_id` - Player ID
+   - `user_name` - Player name
+   - `score` - Game score
+   - `term` - The term that was guessed
+   - `attempts` - Number of attempts
+   - `won` - Whether the game was won
+   - `time_taken` - Time taken to complete the game
+   - `section_id` - Section ID (if applicable)
+   - `created_at` - When the score was recorded
+
+2. `econ_terms_user_stats` - Stores player statistics
+   - `user_id` - Player ID
+   - `streak` - Current winning streak
+   - `high_score` - Highest score achieved
+   - `games_played` - Total games played
+   - `created_at` - When the record was created
+   - `updated_at` - When the record was last updated
+
+## Authentication
+
+The game uses Supabase authentication. If the user is not authenticated, they will play as a guest.
+
+## Usage
+
+To play the game, simply open `game.html` in a web browser. The game will automatically connect to Supabase if the credentials are valid.
+
+### Game Features
+
+- **Automatic Progressive Hints**: Hints are automatically revealed after every odd-numbered attempt. The first hint (topic) is available at the start, the second hint after the 1st attempt, and the final hint after the 3rd attempt.
+- **Score System**: Points are awarded based on speed, attempts left, term length, and consecutive wins.
+- **Leaderboard**: View the highest scores from other players when signed in.
+- **Guest Mode**: Play without signing in (scores won't be saved to the leaderboard).
diff --git a/activities/econ-words-new/css/econ-words.css b/activities/econ-words-new/css/econ-words.css
new file mode 100644
index 0000000..e84a417
--- /dev/null
+++ b/activities/econ-words-new/css/econ-words.css
@@ -0,0 +1,394 @@
+/**
+ * Econ Words Game Styles
+ */
+
+/* Banner styles - matching main website */
+.banner-container {
+    position: relative;
+    height: 250px;
+    overflow: hidden;
+    margin-bottom: 30px;
+    background-color: #1d4ed8;
+}
+
+.banner-image {
+    width: 100%;
+    height: 100%;
+    object-fit: cover;
+    opacity: 0.9;
+}
+
+.banner-overlay {
+    position: absolute;
+    top: 0;
+    left: 0;
+    right: 0;
+    bottom: 0;
+    background: rgba(0, 0, 0, 0.4);
+    color: white;
+    padding: 2rem;
+}
+
+.nav-links {
+    display: flex;
+    justify-content: space-between;
+    margin-bottom: 2rem;
+    width: 100%;
+}
+
+.nav-links-left {
+    display: flex;
+}
+
+.nav-links-right {
+    display: flex;
+    align-items: center;
+}
+
+.nav-link {
+    color: rgba(255,255,255,0.8);
+    text-decoration: none;
+    margin-right: 1.5rem;
+    font-weight: 400;
+    transition: all 0.2s;
+}
+
+.nav-link:hover {
+    color: white;
+    text-decoration: none;
+}
+
+.nav-link.active {
+    color: white;
+    font-weight: 600;
+}
+
+.sign-out-btn {
+    background-color: rgba(255, 255, 255, 0.2);
+    color: white;
+    border: 1px solid rgba(255, 255, 255, 0.4);
+    border-radius: 4px;
+    padding: 4px 10px;
+    font-size: 0.9rem;
+    cursor: pointer;
+    transition: all 0.2s;
+}
+
+.sign-out-btn:hover {
+    background-color: rgba(255, 255, 255, 0.3);
+}
+
+.ml-2 {
+    margin-left: 0.5rem;
+}
+
+.activity-title {
+    font-size: 2.5rem;
+    font-weight: 400;
+    margin-bottom: 0.5rem;
+    color: white;
+    text-shadow: 0 2px 4px rgba(0,0,0,0.2);
+}
+
+/* Game board styles */
+.game-container {
+    max-width: 650px;
+    margin: 0 auto;
+    padding: 0;
+}
+
+.game-board {
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    gap: 10px;
+    margin-bottom: 30px;
+}
+
+.game-row {
+    display: flex;
+    gap: 8px;
+    margin-bottom: 2px;
+    justify-content: center;
+    width: 100%;
+}
+
+.game-cell {
+    width: 52px;
+    height: 52px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    font-size: 1.8rem;
+    font-weight: bold;
+    text-transform: uppercase;
+    background-color: #f8f9fa;
+    border: 2px solid #dee2e6;
+    border-radius: 4px;
+    transition: all 0.2s;
+    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
+}
+
+.game-cell.filled {
+    border-color: #495057;
+}
+
+.game-cell.correct {
+    background-color: #28a745;
+    color: white;
+    border-color: #28a745;
+}
+
+.game-cell.present {
+    background-color: #ffc107;
+    color: #212529;
+    border-color: #ffc107;
+}
+
+.game-cell.absent {
+    background-color: #6c757d;
+    color: white;
+    border-color: #6c757d;
+}
+
+/* Style for space cells */
+.game-cell.space {
+    width: 10px;
+    min-width: 10px;
+    border: none;
+    background-color: transparent;
+    box-shadow: none;
+    margin: 0 2px;
+}
+
+/* Keyboard styles */
+.keyboard {
+    display: flex;
+    flex-direction: column;
+    gap: 8px;
+    margin-top: 25px;
+    margin-bottom: 40px;
+    user-select: none;
+    width: 100%;
+    max-width: 650px;
+    margin-left: auto;
+    margin-right: auto;
+}
+
+.keyboard-row {
+    display: flex;
+    justify-content: center;
+    gap: 6px;
+    margin-bottom: 8px;
+    width: 100%;
+}
+
+.key {
+    flex: 1;
+    min-width: 40px;
+    max-width: 55px;
+    height: 58px;
+    border-radius: 6px;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    background-color: #e9ecef;
+    font-weight: bold;
+    cursor: pointer;
+    text-transform: uppercase;
+    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
+    transition: all 0.2s;
+    margin: 0 2px;
+}
+
+.key:hover {
+    background-color: #dee2e6;
+    transform: translateY(-2px);
+    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
+}
+
+.key:active {
+    transform: translateY(1px);
+    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
+}
+
+.key.correct {
+    background-color: #28a745;
+    color: white;
+}
+
+.key.present {
+    background-color: #ffc107;
+    color: #212529;
+}
+
+.key.absent {
+    background-color: #6c757d;
+    color: white;
+}
+
+.key-wide {
+    max-width: 85px;
+    min-width: 65px;
+}
+
+.game-hint {
+    font-size: 1.1rem;
+    margin-bottom: 1rem;
+    color: #495057;
+    text-align: center;
+}
+
+/* Status container */
+.status-container {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    margin-bottom: 15px;
+    width: 100%;
+}
+
+/* Game controls */
+.game-controls {
+    display: flex;
+    justify-content: space-between;
+    margin-bottom: 15px;
+    width: 100%;
+}
+
+/* Notification */
+.notification {
+    position: fixed;
+    top: 80px;
+    left: 50%;
+    transform: translateX(-50%) translateY(-100px);
+    background-color: rgba(0, 0, 0, 0.8);
+    color: white;
+    padding: 10px 20px;
+    border-radius: 6px;
+    font-weight: bold;
+    transition: all 0.3s;
+}
+
+.notification.show {
+    transform: translateX(-50%) translateY(0);
+}
+
+/* Loading message */
+.loading {
+    display: none;
+    position: fixed;
+    top: 50%;
+    left: 50%;
+    transform: translate(-50%, -50%);
+    background-color: rgba(0, 0, 0, 0.8);
+    color: white;
+    padding: 20px 30px;
+    border-radius: 8px;
+    font-weight: bold;
+    z-index: 1000;
+}
+
+/* Game stats card */
+.game-stats-card {
+    height: 100%;
+}
+
+.stats-row {
+    display: flex;
+    justify-content: space-between;
+    margin-bottom: 10px;
+}
+
+.stats-value {
+    font-weight: bold;
+}
+
+/* Leaderboard */
+.leaderboard-table {
+    width: 100%;
+}
+
+.leaderboard-sort {
+    cursor: pointer;
+    user-select: none;
+}
+
+.leaderboard-sort:hover {
+    background-color: rgba(0, 0, 0, 0.05);
+}
+
+.sort-indicator {
+    margin-left: 4px;
+    opacity: 0.3;
+    transition: opacity 0.2s;
+}
+
+.leaderboard-filter {
+    margin-bottom: 15px;
+}
+
+.current-user {
+    background-color: rgba(25, 135, 84, 0.1);
+}
+
+/* Result modal */
+.score-display {
+    margin: 20px 0;
+    text-align: center;
+}
+
+.score-value {
+    font-size: 3rem;
+    font-weight: bold;
+    color: #198754;
+}
+
+.score-label {
+    font-size: 1.2rem;
+    color: #6c757d;
+    letter-spacing: 1px;
+}
+
+.term-definition {
+    margin-top: 15px;
+    padding: 15px;
+    background-color: #f8f9fa;
+    border-radius: 6px;
+    border-left: 4px solid #6c757d;
+}
+
+/* Responsive adjustments */
+@media (max-width: 992px) {
+    .game-container {
+        padding: 0 15px;
+    }
+}
+
+@media (max-width: 768px) {
+    .game-cell {
+        width: 45px;
+        height: 45px;
+        font-size: 1.5rem;
+    }
+    
+    .key {
+        min-width: 30px;
+        height: 50px;
+        font-size: 0.9rem;
+    }
+}
+
+@media (max-width: 576px) {
+    .game-cell {
+        width: 36px;
+        height: 36px;
+        font-size: 1.2rem;
+    }
+    
+    .key {
+        min-width: 24px;
+        height: 45px;
+        font-size: 0.8rem;
+    }
+}
diff --git a/activities/econ-words-new/data/econ-terms.csv b/activities/econ-words-new/data/econ-terms.csv
new file mode 100644
index 0000000..5ba880c
--- /dev/null
+++ b/activities/econ-words-new/data/econ-terms.csv
@@ -0,0 +1,127 @@
+Word,Hint 1 (Chapter Title),Hint 2 (General Related Word),Hint 3 (Stronger Hint)
+ECONOMICS,Introduction to Economics,Decisions,The study of how choices are made given that decision makers face constraints.
+SCARCITY,Introduction to Economics,Limited,Wants and needs of decision makers are greater than the limited resources available.
+OPPORTUNITY COST,Introduction to Economics,Forgone,What is given up when a choice is made.
+MICROECONOMICS,Introduction to Economics,Individual,Studies how specific individuals and firms interact and make decisions.
+MACROECONOMICS,Introduction to Economics,Aggregate,Examines the economy as a whole.
+POSITIVE STATEMENT,Introduction to Economics,Objective,A statement about how things objectively are.
+NORMATIVE STATEMENT,Introduction to Economics,Subjective,A statement about how we think things should be.
+MARGINAL ANALYSIS,Introduction to Economics,Additional,Comparing the marginal benefit and marginal cost of a decision.
+RATIONAL DECISION MAKERS,Introduction to Economics,Information,Individuals who use all available information to achieve their goals.
+EXPLICIT COST,Introduction to Economics,Payment,A direct monetary payment associated with a choice.
+IMPLICIT COST,Introduction to Economics,Non-financial,"A non-monetary cost of a decision, often the value of the next best option forgone."
+SLOPE,Introduction to Economics (Appendix),Steepness,Change in the Y-variable divided by the change in the X-variable on a graph.
+Y INTERCEPT,Introduction to Economics (Appendix),Starting Point,The value of the Y-variable when the X-variable is zero.
+DEMAND,Supply and Demand,Consumer,The amount of a good or service that consumers purchase at a particular price.
+SUPPLY,Supply and Demand,Producer,The amount of a good that a firm is willing and able to produce at a given price.
+EQUILIBRIUM,Supply and Demand,Balance,The point where quantity demanded equals quantity supplied.
+LAW OF DEMAND,Supply and Demand,Inverse,Price and quantity demanded of a good or service move in the opposite direction.
+LAW OF SUPPLY,Supply and Demand,Direct,"When the price of a good increases, the quantity supplied increases."
+COMPLEMENT GOODS,Supply and Demand,Together,"When the price of one good decreases, it causes an increase in demand for another."
+SUBSTITUTE GOODS,Supply and Demand,Alternative,"When the price of one good decreases, the demand for the other good also decreases."
+PERFECTLY COMPETITIVE MARKET,Supply and Demand,Identical Products,"A market with many buyers and sellers, identical products, and easy entry/exit."
+DEMAND SCHEDULE,Supply and Demand,Table,A table showing the quantity demanded of a good at various prices.
+SUPPLY SCHEDULE,Supply and Demand,List,A table showing the quantity supplied of a good at various prices.
+NORMAL GOOD,Supply and Demand,"Income Rises, Buy More",A good for which demand increases as consumer income rises.
+INFERIOR GOOD,Supply and Demand,"Income Rises, Buy Less",A good for which demand decreases as consumer income rises.
+MARKET EQUILIBRIUM,Supply and Demand,Intersection,Occurs where the supply and demand curves intersect.
+SHORTAGE,Supply and Demand,Not Enough,Occurs when the quantity demanded exceeds the quantity supplied at the current price. (Also Excess Demand)
+SURPLUS,Supply and Demand,Too Much,Occurs when the quantity supplied exceeds the quantity demanded at the current price. (Also Excess Supply)
+CETERIS PARIBUS,Supply and Demand,All Else Equal,"Latin phrase meaning ""all other things held constant."""
+QUANTITY DEMANDED,Supply and Demand,Amount Wanted,The amount of a good or service that consumers purchase at a particular price.
+QUANTITY SUPPLIED,Supply and Demand,Amount Offered,The amount of a good that a firm is willing and able to produce at a given price.
+PRICE CEILING,Supply and Demand,Max Price,A government-imposed maximum price that can be charged for a good or service.
+PRICE FLOOR,Supply and Demand,Min Price,A government-imposed minimum price that can be charged for a good or service.
+MARKET FAILURE,Supply and Demand,Inefficient,A situation where the market on its own fails to allocate resources efficiently.
+EXTERNALITY,Supply and Demand,Side Effect,A cost or benefit caused by a producer that is not financially incurred or received by that producer.
+GDP,Measuring the Macroeconomy,Production,Gross Domestic Product; The total value of all final goods and services produced within a country's borders.
+INFLATION,Measuring the Macroeconomy,Prices,The rate at which the general level of prices for goods and services is rising.
+UNEMPLOYMENT,Measuring the Macroeconomy,Jobless,The state of being without a paid job but available to work and actively seeking.
+CPI,Measuring the Macroeconomy,Basket,Consumer Price Index; the average price of all goods and services that a household consumes.
+GDP DEFLATOR,Measuring the Macroeconomy,Nominal vs Real,(Nominal GDP / Real GDP) x 100.
+REAL GDP,Measuring the Macroeconomy,Constant Prices,GDP holding prices fixed at the prices in the base year.
+NOMINAL GDP,Measuring the Macroeconomy,Current Prices,"Market value of goods and services produced, calculated using current year prices."
+FRICTIONAL UNEMPLOYMENT,Measuring the Macroeconomy,Job Search,Unemployment caused by the time-lag involved in workers moving from one job to another.
+STRUCTURAL UNEMPLOYMENT,Measuring the Macroeconomy,Mismatch,Occurs when there is a mismatch between worker skills and employer needs.
+CYCLICAL UNEMPLOYMENT,Measuring the Macroeconomy,Downturn,Occurs when individuals lose their job because of changes in production (business cycles).
+LABOR FORCE,Measuring the Macroeconomy,Employed+Unemployed,The number of employed plus the number of unemployed individuals.
+INTERMEDIATE GOODS,Measuring the Macroeconomy,Components,Goods produced and then used in the production of another good.
+FINAL GOODS,Measuring the Macroeconomy,End User,Goods and services purchased by the actual user of the product.
+EXPENDITURE APPROACH,Measuring the Macroeconomy,Spending Groups,"Method of calculating GDP by summing spending by households, firms, government, and foreigners."
+DURABLE GOODS,Measuring the Macroeconomy,Long-lasting,Goods that last a long time (longer than 3 years) and are bought infrequently.
+NONDURABLE GOODS,Measuring the Macroeconomy,Consumable,Goods that do not have a long useful life and are purchased frequently.
+VALUE ADDED,Measuring the Macroeconomy,Production Stages,The market value a firm adds to a product.
+STANDARD OF LIVING,Measuring the Macroeconomy,Well-being,The degree of wealth and material comfort available to a person or community.
+FULL EMPLOYMENT,Measuring the Macroeconomy,No Cyclical,An economic state where all available labor resources are being used efficiently.
+NATURAL UNEMPLOYMENT,Measuring the Macroeconomy,Frictional+Structural,The sum of frictional and structural unemployment.
+LABOR FORCE PARTICIPATION RATE,Measuring the Macroeconomy,Active Workers,(Labor Force / Civilian Population) x 100.
+DISCOURAGED WORKERS,Measuring the Macroeconomy,Given Up,Individuals who want a job but have stopped looking because they believe no jobs are available.
+AGGREGATE EXPENDITURES,Short-Run Macroeconomic Equilibrium,Total Spending,Total spending in the economy (C + I^P + G + NX).
+CONSUMPTION FUNCTION,Short-Run Macroeconomic Equilibrium,Households,Shows the relationship between disposable income (Y−T) and consumption (C).
+AUTONOMOUS CONSUMPTION,Short-Run Macroeconomic Equilibrium,Independent,Level of consumption that does not depend on disposable income. (AC)
+MPC,Short-Run Macroeconomic Equilibrium,Slope,Marginal Propensity to Consume: The fraction of an additional dollar of disposable income that is spent on consumption.
+PLANNED INVESTMENT,Short-Run Macroeconomic Equilibrium,Business Spending,"Spending by firms on new capital and new homes, excluding inventory changes. (IP)"
+EXPENDITURE MULTIPLIER,Short-Run Macroeconomic Equilibrium,Ripple Effect,1/(1−MPC); shows how an initial change in spending leads to a larger change in Y.
+TAX MULTIPLIER,Short-Run Macroeconomic Equilibrium,Tax Impact,−MPC/(1−MPC); shows how a change in taxes affects equilibrium output.
+DISPOSABLE INCOME,Short-Run Macroeconomic Equilibrium,After-Tax Income,Income remaining after deduction of taxes (Y-T).
+WEALTH,Short-Run Macroeconomic Equilibrium,Assets - Liabilities,The total value of assets minus the total value of liabilities.
+BUSINESS CYCLE,Short-Run Macroeconomic Equilibrium,Fluctuations,The natural tendency of the economy to move towards and away from full-employment output.
+RECESSION,Short-Run Macroeconomic Equilibrium,Decline,"A significant decline in economic activity spread across the economy, lasting months."
+TROUGH,Short-Run Macroeconomic Equilibrium,Low Point,The lowest point of economic activity in a business cycle before recovery begins.
+EXPANSION,Short-Run Macroeconomic Equilibrium,Growth,A period when the economy moves from a trough to a peak.
+PEAK,Short-Run Macroeconomic Equilibrium,High Point,The highest point of economic activity in a business cycle before a recession.
+DEPRESSION,Short-Run Macroeconomic Equilibrium,Severe Recession,"A sustained, long-term downturn in economic activity."
+MARGINAL PROPENSITY TO SAVE,Short-Run Macroeconomic Equilibrium,Fraction Saved,MPS: The fraction of an additional dollar of disposable income that is saved. (1-MPC)
+EQUILIBRIUM LINE,Short-Run Macroeconomic Equilibrium,45 Degree,The line on the Aggregate Expenditure model where Y = AE.
+INVENTORY,Short-Run Macroeconomic Equilibrium,Unsold Goods,Goods that have been produced but not yet sold.
+FISCAL POLICY,Fiscal Policy,Government,Changes in government spending (G) or taxation (T) to influence the economy.
+COUNTER CYCLICAL POLICY,Fiscal Policy,Stabilize,Government actions to move the economy closer to full-employment output.
+BUDGET DEFICIT,Fiscal Policy,Spending>Taxes,Occurs when government spending (G) is greater than tax revenue (T).
+NATIONAL DEBT,Fiscal Policy,Accumulated Deficits,The total amount of money that the government owes to lenders.
+AUTOMATIC STABILIZERS,Fiscal Policy,Built-in,Fiscal policies that automatically enact in response to changes in production level.
+GOVERNMENT PURCHASES,Fiscal Policy,Public Spending,"Spending by the government on goods and services, like defense and infrastructure. (G)"
+NET EXPORTS,Fiscal Policy,Exports - Imports,The value of a country's total exports minus its total imports. (NX)
+DISCRETIONARY FISCAL POLICY,Fiscal Policy,Intentional,Changes in government spending or taxation decided upon by the government annually.
+PUBLIC DEBT,Fiscal Policy,Government Owing,The total amount that the US Government owes to private lenders.
+DEBT TO GDP RATIO,Fiscal Policy,Debt Burden,A measure comparing a country's total debt to its total economic output.
+ARRA,Fiscal Policy,Recovery Act,American Reinvestment and Recovery Act (Stimulus Package) aimed to speed recovery from the Great Recession.
+BUDGET SURPLUS,Fiscal Policy,Taxes>Spending,Occurs when tax revenue (T) is greater than government spending (G).
+TRANSFER PAYMENTS,Fiscal Policy,No Good/Service,"Payments made by the government to individuals for which no good or service is received in return (e.g., welfare)."
+MONETARY POLICY,Monetary Policy,Central Bank,Actions by the central bank involving altering the money supply to change interest rates.
+FEDERAL RESERVE,Monetary Policy,US Central Bank,The Fed; the central bank of the United States responsible for monetary policy.
+OPEN MARKET OPERATIONS,Monetary Policy,Bond Trading,The buying and selling of Treasury bonds by the Fed to alter the money supply.
+FEDERAL FUNDS RATE,Monetary Policy,Interbank Rate,The interest rate that banks charge one another for short-term (overnight) loans.
+RRR,Monetary Policy,Bank Reserves,Required Reserve Ratio: The fraction of deposits that banks are required to keep on reserve.
+BARTER ECONOMY,Monetary Policy,Trade without Money,An economy involving trading goods and services directly for other goods and services.
+MEDIUM OF EXCHANGE,Monetary Policy,Payment Method,A function of money; accepted by sellers for goods and services.
+UNIT OF ACCOUNT,Monetary Policy,Value Measure,A function of money; used as a way to measure the value of goods and services.
+STORE OF VALUE,Monetary Policy,Holds Worth,A function of money; its value does not deteriorate quickly.
+FIAT MONEY,Monetary Policy,Government-backed,Money that has no intrinsic value other than being a means of exchange.
+COMMODITY MONEY,Monetary Policy,Intrinsic Value,"Goods that have intrinsic value but can also serve as money (e.g., gold)."
+LIQUIDITY,Monetary Policy,Easily Spent,The ability for money to be used as a form of payment quickly.
+BOND,Monetary Policy,IOU,"A promise to pay back a specified amount of money at a future date, often with interest."
+MONEY DEMAND,Monetary Policy,Desire for Cash,The relationship between the amount of M1 money demanded and the interest rate.
+MONEY SUPPLY,Monetary Policy,Available Cash,"The total amount of M1 money in circulation, controlled by the Federal Reserve."
+NOMINAL RETURN,Monetary Policy,Bond Profit,The monetary gain from purchasing a bond (Value of Bond - Price of Bond).
+FOMC,Monetary Policy,Fed Committee,Federal Open Market Committee; the Fed body that determines monetary policy.
+BANK RUN,Monetary Policy,Mass Withdrawal,When many depositors withdraw their funds from a bank simultaneously due to fears of insolvency.
+QUANTITATIVE EASING,Monetary Policy,QE,Unconventional monetary policy where a central bank purchases assets to inject liquidity.
+AGGREGATE DEMAND,Aggregate Demand and Aggregate Supply,Total Demand,AD Curve: Curve showing equilibrium level of spending at every price level.
+AGGREGATE SUPPLY,Aggregate Demand and Aggregate Supply,Total Production,AS Curve: Curve showing the amount firms are willing to produce at various price levels.
+STAGFLATION,Macroeconomic Shocks and Policy Responses,Stagnant Inflation,A period of stagnant economic growth accompanied by high inflation.
+DEMAND SHOCK,Macroeconomic Shocks and Policy Responses,AD Shift,Anything that changes the Aggregate Expenditure curve other than price.
+SUPPLY SHOCK,Macroeconomic Shocks and Policy Responses,AS Shift,"An event that suddenly changes the price of a commodity or service, affecting AS."
+DOVE POLICY,Macroeconomic Shocks and Policy Responses,Prioritize Jobs,Policy response to a negative supply shock that saves jobs at the cost of higher prices.
+HAWK POLICY,Macroeconomic Shocks and Policy Responses,Prioritize Prices,Policy response to a negative supply shock that keeps prices stable at the expense of jobs.
+INTEREST RATE EFFECT,Aggregate Demand and Aggregate Supply,Borrowing Cost,"On AD: Changes in this affect autonomous consumption and planned investment, shifting AD."
+FISCAL POLICY EFFECT,Aggregate Demand and Aggregate Supply,Gov. Spending/Taxes,On AD: Changes in G or T directly influence the AE curve and thus shift the AD curve.
+MONETARY POLICY EFFECT,Aggregate Demand and Aggregate Supply,Money Supply Change,On AD: Changes in the money supply by the Fed alter interest rates and shift the AD curve.
+COST OF INPUTS,Aggregate Demand and Aggregate Supply,Production Expenses,AS Shifter: Changes in costs of labor or capital shift the AS curve.
+TECHNOLOGY,Aggregate Demand and Aggregate Supply,Efficiency,AS Shifter: Improvements in technology increase the AS curve.
+YBAR,Macroeconomic Shocks and Policy Responses,Potential GDP,Full-Employment Output: The level of output when all resources are utilized efficiently.
+AUTONOMOUS SPENDING,Aggregate Demand and Aggregate Supply,Non-Income Driven,Components of aggregate expenditure that do not depend on the level of national income.
+WEALTH EFFECT,Aggregate Demand and Aggregate Supply,Price Level Impact,A change in the price level affecting purchasing power and thus consumption.
+INTERNATIONAL TRADE EFFECT,Aggregate Demand and Aggregate Supply,Exports/Imports Impact,A change in the domestic price level affecting net exports.
+NATURAL DISASTER,Aggregate Demand and Aggregate Supply,Supply Shock,As an AS Shifter: Can reduce the stock of capital and shift the Aggregate Supply curve left.
+EXCESS DEMAND,Complete Macroeconomic Equilibrium,AD > AS,"In AD-AS Model: At a given price level, the aggregate quantity demanded exceeds aggregate quantity supplied."
+EXCESS SUPPLY,Complete Macroeconomic Equilibrium,AS > AD,"In AD-AS Model: At a given price level, the aggregate quantity supplied exceeds aggregate quantity demanded."
diff --git a/activities/econ-words-new/game.html b/activities/econ-words-new/game.html
new file mode 100644
index 0000000..e02e8b6
--- /dev/null
+++ b/activities/econ-words-new/game.html
@@ -0,0 +1,283 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Econ Words - Macroeconomics Course</title>
+    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css">
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
+    <link rel="stylesheet" href="../../styles.css">
+    <link rel="stylesheet" href="css/econ-words.css">
+</head>
+<body>
+    <!-- Banner -->
+    <div class="banner-container">
+        <img src="../../images/banner3.png" alt="Economics Course Banner" class="banner-image">
+        <div class="banner-overlay">
+            <div class="nav-links">
+                <div class="nav-links-left">
+                    <a href="../../index.html" class="nav-link">Home</a>
+                    <a href="../../materials.html" class="nav-link">Materials</a>
+                    <a href="../../games.html" class="nav-link active">Games</a>
+                    <a href="../index.html" class="nav-link">Activities</a>
+                </div>
+                <div class="nav-links-right">
+                    <span class="nav-link">Welcome, <span id="user-name">Guest</span></span>
+                    <button id="sign-out-btn" class="sign-out-btn">Sign Out</button>
+                </div>
+            </div>
+            <h1 class="activity-title">Economics Terms Challenge</h1>
+        </div>
+    </div>
+
+    <!-- Main content -->
+    <div class="container mb-5">
+        <!-- Loading Message -->
+        <div id="loading-message" class="loading">Loading game...</div>
+        
+        <!-- Notification -->
+        <div id="notification" class="notification">Notification</div>
+        
+        <div class="row">
+            <!-- Game area column -->
+            <div class="col-lg-8 mb-4">
+                <!-- Status container -->
+                <div class="status-container">
+                    <h2 id="game-title" class="h4">Econ Words</h2>
+                </div>
+                
+                <!-- Game hint -->
+                <div id="game-hint" class="game-hint">Loading hint...</div>
+                
+                <!-- Game board -->
+                <div class="game-container">
+                    <div id="game-board" class="game-board">
+                        <!-- Game cells will be inserted here by JavaScript -->
+                    </div>
+                    
+                    <!-- Keyboard -->
+                    <div class="keyboard">
+                        <div class="keyboard-row">
+                            <div class="key" data-key="Q">Q</div>
+                            <div class="key" data-key="W">W</div>
+                            <div class="key" data-key="E">E</div>
+                            <div class="key" data-key="R">R</div>
+                            <div class="key" data-key="T">T</div>
+                            <div class="key" data-key="Y">Y</div>
+                            <div class="key" data-key="U">U</div>
+                            <div class="key" data-key="I">I</div>
+                            <div class="key" data-key="O">O</div>
+                            <div class="key" data-key="P">P</div>
+                        </div>
+                        <div class="keyboard-row">
+                            <div class="key" data-key="A">A</div>
+                            <div class="key" data-key="S">S</div>
+                            <div class="key" data-key="D">D</div>
+                            <div class="key" data-key="F">F</div>
+                            <div class="key" data-key="G">G</div>
+                            <div class="key" data-key="H">H</div>
+                            <div class="key" data-key="J">J</div>
+                            <div class="key" data-key="K">K</div>
+                            <div class="key" data-key="L">L</div>
+                        </div>
+                        <div class="keyboard-row">
+                            <div class="key key-wide" data-key="ENTER">Enter</div>
+                            <div class="key" data-key="Z">Z</div>
+                            <div class="key" data-key="X">X</div>
+                            <div class="key" data-key="C">C</div>
+                            <div class="key" data-key="V">V</div>
+                            <div class="key" data-key="B">B</div>
+                            <div class="key" data-key="N">N</div>
+                            <div class="key" data-key="M">M</div>
+                            <div class="key" data-key=" ">Space</div>
+                            <div class="key key-wide" data-key="BACKSPACE">
+                                <i class="fas fa-backspace"></i>
+                            </div>
+                        </div>
+                    </div>
+                </div>
+            </div>
+            
+            <!-- Stats & Leaderboard column -->
+            <div class="col-lg-4">
+                <!-- Game Stats Card -->
+                <div class="card game-stats-card mb-4">
+                    <div class="card-header bg-primary text-white">
+                        <h5 class="mb-0">Econ Words Leaderboard</h5>
+                    </div>
+                    <div class="card-body">
+                        <div class="mb-3">
+                            <div class="stats-row">
+                                <span>Your Best Score:</span>
+                                <span id="user-best-score" class="stats-value">-</span>
+                            </div>
+                            <div class="stats-row">
+                                <span>Current Streak:</span>
+                                <span id="user-current-streak" class="stats-value">-</span>
+                            </div>
+                            <div class="stats-row">
+                                <span>Games Played:</span>
+                                <span id="user-games-played" class="stats-value">-</span>
+                            </div>
+                            <div class="stats-row">
+                                <span>Your Rank:</span>
+                                <span id="user-rank" class="stats-value">-</span>
+                            </div>
+                        </div>
+                        
+                        <h6 class="mb-2">Top Scores</h6>
+                        <div class="leaderboard-filter mb-2">
+                            <select id="time-filter" class="form-control form-control-sm">
+                                <option value="all">All Time</option>
+                                <option value="day">Last 24 Hours</option>
+                                <option value="week">This Week</option>
+                                <option value="month">This Month</option>
+                            </select>
+                        </div>
+                        
+                        <div class="table-responsive">
+                            <table class="table table-sm leaderboard-table">
+                                <thead>
+                                    <tr>
+                                        <th>#</th>
+                                        <th class="leaderboard-sort" data-sort="user_name">
+                                            Player
+                                            <span class="sort-indicator">↕</span>
+                                        </th>
+                                        <th class="leaderboard-sort text-center" data-sort="score">
+                                            Score
+                                            <span class="sort-indicator">↓</span>
+                                        </th>
+                                        <th class="leaderboard-sort text-center" data-sort="attempts">
+                                            Tries
+                                            <span class="sort-indicator">↕</span>
+                                        </th>
+                                        <th class="leaderboard-sort" data-sort="created_at">
+                                            Date
+                                            <span class="sort-indicator">↕</span>
+                                        </th>
+                                    </tr>
+                                </thead>
+                                <tbody>
+                                    <tr>
+                                        <td colspan="5" class="text-center">Loading scores...</td>
+                                    </tr>
+                                </tbody>
+                            </table>
+                        </div>
+                        <button id="refresh-leaderboard" class="btn btn-sm btn-outline-secondary">
+                            <i class="fas fa-sync-alt mr-1"></i>Refresh
+                        </button>
+                    </div>
+                </div>
+                
+                <!-- How to Play Card -->
+                <div class="card mb-4">
+                    <div class="card-header">
+                        <h5 class="mb-0">How to Play</h5>
+                    </div>
+                    <div class="card-body">
+                        <p>Guess the economics term in 6 tries or less:</p>
+                        <ul>
+                            <li>Each guess must match the number of letters in the term</li>
+                            <li>Green tiles show correct letters in the right position</li>
+                            <li>Yellow tiles show correct letters in the wrong position</li>
+                            <li>Gray tiles show letters that aren't in the term</li>
+                            <li>Multi-word terms and spaces are supported</li>
+                        </ul>
+                        <hr>
+                        <p><strong>Scoring</strong></p>
+                        <ul>
+                            <li>Fewer attempts = more points</li>
+                            <li>Longer terms = more points</li>
+                            <li>Multi-word terms = bonus points</li>
+                            <li>Longer streaks = more points</li>
+                        </ul>
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Result Modal -->
+    <div class="modal fade result-modal" id="resultModal" tabindex="-1" aria-labelledby="resultModalLabel" aria-hidden="true">
+        <div class="modal-dialog">
+            <div class="modal-content">
+                <div class="modal-header">
+                    <h5 class="modal-title" id="resultModalLabel">Game Over</h5>
+                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
+                        <span aria-hidden="true">&times;</span>
+                    </button>
+                </div>
+                <div class="modal-body">
+                    <div id="result-message">
+                        <!-- Result message will be inserted here -->
+                    </div>
+                    <div class="explanation" id="explanation">
+                        <!-- Explanation will be inserted here -->
+                    </div>
+                </div>
+                <div class="modal-footer flex-column">
+                    <button type="button" class="btn btn-primary btn-lg btn-block btn-play-again" id="play-again-btn">
+                        <i class="fas fa-redo-alt mr-2"></i>Play Again
+                    </button>
+                    <div class="d-flex w-100 justify-content-between mt-2">
+                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
+                        <a href="../../games.html" class="btn btn-outline-primary">Choose Another Game</a>
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Footer -->
+    <footer class="bg-light py-4 mt-5">
+        <div class="container text-center">
+            <p>Economics Games &copy; 2025 | <a href="../../index.html">Course Home</a></p>
+        </div>
+    </footer>
+
+    <!-- Scripts -->
+    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js"></script>
+
+    <!-- Supabase Scripts -->
+    <script src="https://unpkg.com/@supabase/supabase-js@2.38.4/dist/umd/supabase.js"></script>
+    
+    <!-- Environment setup -->
+    <script src="js/env.js"></script>
+    
+    <!-- Supabase client initialization -->
+    <script src="js/supabase-client.js"></script>
+    
+    <!-- Authentication module -->
+    <script src="js/auth.js"></script>
+    
+    <!-- Database module -->
+    <script src="js/database.js"></script>
+    
+    <!-- Terms data -->
+    <script src="js/terms-data.js"></script>
+    
+    <!-- Leaderboard module -->
+    <script src="js/leaderboard.js"></script>
+    
+    <!-- Game logic -->
+    <script src="js/game.js"></script>
+    
+    <!-- Handle sign out -->
+    <script>
+        // Set up sign out button
+        document.getElementById('sign-out-btn').addEventListener('click', function() {
+            if (window.EconWordsAuth && typeof window.EconWordsAuth.signOut === 'function') {
+                window.EconWordsAuth.signOut()
+                    .then(() => {
+                        // Reload the page after sign out
+                        window.location.reload();
+                    });
+            }
+        });
+    </script>
+</body>
+</html>
diff --git a/activities/econ-words-new/index.html b/activities/econ-words-new/index.html
new file mode 100644
index 0000000..bbe6455
--- /dev/null
+++ b/activities/econ-words-new/index.html
@@ -0,0 +1,162 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Econ Words - Macroeconomics Course</title>
+    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css">
+    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
+    <link rel="stylesheet" href="../../styles.css">
+    <style>
+        .banner-container {
+            position: relative;
+            height: 250px;
+            overflow: hidden;
+            margin-bottom: 30px;
+            background-color: #1d4ed8;
+        }
+        .banner-image {
+            width: 100%;
+            height: 100%;
+            object-fit: cover;
+            opacity: 0.9;
+        }
+        .banner-overlay {
+            position: absolute;
+            top: 0;
+            left: 0;
+            right: 0;
+            bottom: 0;
+            background: rgba(0, 0, 0, 0.4);
+            color: white;
+            padding: 2rem;
+        }
+        .nav-links {
+            display: flex;
+            justify-content: space-between;
+            margin-bottom: 2rem;
+            width: 100%;
+        }
+        .nav-links-left {
+            display: flex;
+        }
+        .nav-link {
+            color: rgba(255,255,255,0.8);
+            text-decoration: none;
+            margin-right: 1.5rem;
+            font-weight: 400;
+            transition: all 0.2s;
+        }
+        .nav-link:hover {
+            color: white;
+            text-decoration: none;
+        }
+        .nav-link.active {
+            color: white;
+            font-weight: 600;
+        }
+        .activity-title {
+            font-size: 2.5rem;
+            font-weight: 400;
+            margin-bottom: 0.5rem;
+            color: white;
+            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
+        }
+        .card {
+            transition: transform 0.3s, box-shadow 0.3s;
+        }
+        .card:hover {
+            transform: translateY(-5px);
+            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
+        }
+    </style>
+</head>
+<body>
+    <!-- Banner -->
+    <div class="banner-container">
+        <img src="../../images/banner3.png" alt="Economics Course Banner" class="banner-image">
+        <div class="banner-overlay">
+            <div class="nav-links">
+                <div class="nav-links-left">
+                    <a href="../../index.html" class="nav-link">Home</a>
+                    <a href="../../materials.html" class="nav-link">Materials</a>
+                    <a href="../../games.html" class="nav-link active">Games</a>
+                    <a href="../index.html" class="nav-link">Activities</a>
+                </div>
+            </div>
+            <h1 class="activity-title">Econ Words Game</h1>
+        </div>
+    </div>
+
+    <!-- Main content -->
+    <div class="container my-5">
+        <div class="row">
+            <div class="col-md-8 mx-auto text-center">
+                <h2 class="mb-4">Economics Terms Challenge</h2>
+                <p class="lead mb-5">Test your economics vocabulary with our Wordle-style game!</p>
+                
+                <div class="row">
+                    <div class="col-md-6 mb-4">
+                        <div class="card h-100">
+                            <div class="card-body text-center">
+                                <h4 class="card-title">Daily Challenge</h4>
+                                <p class="card-text">Play today's economics term. Changes daily!</p>
+                                <a href="game.html?daily=true" class="btn btn-primary">
+                                    <i class="fas fa-calendar-day mr-2"></i>Play Daily Challenge
+                                </a>
+                            </div>
+                        </div>
+                    </div>
+                    <div class="col-md-6 mb-4">
+                        <div class="card h-100">
+                            <div class="card-body text-center">
+                                <h4 class="card-title">Practice Mode</h4>
+                                <p class="card-text">Play with random economics terms. Practice as much as you want!</p>
+                                <a href="game.html" class="btn btn-success">
+                                    <i class="fas fa-play mr-2"></i>Play Random Term
+                                </a>
+                            </div>
+                        </div>
+                    </div>
+                </div>
+                
+                <div class="mt-5">
+                    <h3 class="mb-4">How to Play</h3>
+                    <div class="card">
+                        <div class="card-body">
+                            <p>Guess the economics term in 6 tries or less:</p>
+                            <ul class="text-left">
+                                <li>Each guess must match the number of letters in the term</li>
+                                <li>Green tiles show correct letters in the right position</li>
+                                <li>Yellow tiles show correct letters in the wrong position</li>
+                                <li>Gray tiles show letters that aren't in the term</li>
+                                <li>Multi-word terms and spaces are supported</li>
+                            </ul>
+                            <hr>
+                            <p><strong>Scoring</strong></p>
+                            <ul class="text-left">
+                                <li>Fewer attempts = more points</li>
+                                <li>Longer terms = more points</li>
+                                <li>Multi-word terms = bonus points</li>
+                                <li>Longer streaks = more points</li>
+                            </ul>
+                        </div>
+                    </div>
+                </div>
+            </div>
+        </div>
+    </div>
+
+    <!-- Footer -->
+    <footer class="bg-light py-4 mt-5">
+        <div class="container text-center">
+            <p>Economics Games &copy; 2025 | <a href="../../index.html">Course Home</a></p>
+        </div>
+    </footer>
+
+    <!-- Scripts -->
+    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js"></script>
+</body>
+</html>
diff --git a/activities/econ-words-new/js/auth.js b/activities/econ-words-new/js/auth.js
new file mode 100644
index 0000000..650b74f
--- /dev/null
+++ b/activities/econ-words-new/js/auth.js
@@ -0,0 +1,169 @@
+/**
+ * Authentication module for Econ Words Game
+ * This file handles user authentication and session management
+ */
+
+const EconWordsAuth = {
+  // Current user information
+  currentUser: null,
+  isAuthenticated: false,
+  isGuest: false,
+
+  // Initialize authentication
+  init: async function() {
+    console.log('Initializing Econ Words Auth...');
+
+    // Check if Supabase client is initialized
+    if (!window.supabaseClient) {
+      console.error('Supabase client not available, setting up guest mode');
+      return this._setupGuestMode();
+    }
+
+    try {
+      // Get the current session
+      const { data: { session }, error } = await supabaseClient.auth.getSession();
+
+      if (error) {
+        console.error('Error getting auth session:', error);
+        return this._setupGuestMode();
+      }
+
+      if (session) {
+        // User is authenticated
+        const { user } = session;
+        await this._setupAuthenticatedUser(user);
+      } else {
+        // No session found
+        console.log('No active session found');
+        this._setupGuestMode();
+      }
+    } catch (error) {
+      console.error('Authentication initialization error:', error);
+      this._setupGuestMode();
+    }
+    
+    // Dispatch auth ready event
+    this._dispatchAuthReadyEvent();
+  },
+
+  // Set up authenticated user
+  _setupAuthenticatedUser: async function(user) {
+    try {
+      // Get user profile from profiles table if available
+      let userName = user.user_metadata?.full_name || user.email || 'User';
+      let sectionId = null;
+
+      try {
+        // Try to get profile data
+        const { data: profile, error: profileError } = await supabaseClient
+          .from('profiles')
+          .select('*')
+          .eq('id', user.id)
+          .single();
+
+        if (!profileError && profile) {
+          userName = profile.full_name || userName;
+          sectionId = profile.section_id || null;
+        }
+      } catch (profileError) {
+        console.warn('Error fetching user profile:', profileError);
+      }
+
+      // Set current user data
+      this.currentUser = {
+        id: user.id,
+        name: userName,
+        email: user.email,
+        isGuest: false,
+        sectionId: sectionId
+      };
+      
+      this.isAuthenticated = true;
+      this.isGuest = false;
+
+      console.log('User authenticated:', this.currentUser.name);
+    } catch (error) {
+      console.error('Error setting up authenticated user:', error);
+      this._setupGuestMode();
+    }
+  },
+
+  // Set up guest mode
+  _setupGuestMode: function() {
+    // Generate unique ID for guest
+    const guestId = 'guest_' + Math.random().toString(36).substring(2, 15);
+    
+    this.currentUser = {
+      id: guestId,
+      name: 'Guest User',
+      isGuest: true,
+      sectionId: null
+    };
+    
+    this.isAuthenticated = false;
+    this.isGuest = true;
+
+    console.log('Guest mode activated with ID:', guestId);
+  },
+
+  // Sign out the current user
+  signOut: async function() {
+    console.log('Signing out...');
+    
+    if (!window.supabaseClient) {
+      console.warn('Supabase client not available for sign-out');
+      this._setupGuestMode();
+      this._dispatchAuthReadyEvent();
+      return;
+    }
+
+    try {
+      const { error } = await supabaseClient.auth.signOut();
+      
+      if (error) {
+        console.error('Error signing out:', error);
+      }
+      
+      // Reset to guest mode regardless of error
+      this._setupGuestMode();
+      this._dispatchAuthReadyEvent();
+      
+      console.log('Sign-out complete');
+    } catch (error) {
+      console.error('Sign-out error:', error);
+      this._setupGuestMode();
+      this._dispatchAuthReadyEvent();
+    }
+  },
+
+  // Get the current authenticated user (or guest)
+  getCurrentUser: function() {
+    return this.currentUser;
+  },
+
+  // Check if the user is authenticated (not guest)
+  isUserAuthenticated: function() {
+    return this.isAuthenticated && !this.isGuest;
+  },
+
+  // Custom event for auth state changes
+  _dispatchAuthReadyEvent: function() {
+    if (typeof CustomEvent === 'function') {
+      const authEvent = new CustomEvent('econwords-auth-ready', {
+        detail: {
+          authenticated: this.isAuthenticated,
+          user: this.currentUser
+        }
+      });
+      window.dispatchEvent(authEvent);
+    }
+  }
+};
+
+// Initialize when DOM is loaded
+document.addEventListener('DOMContentLoaded', () => {
+  EconWordsAuth.init();
+});
+
+// Export as global object
+window.EconWordsAuth = EconWordsAuth;
diff --git a/activities/econ-words-new/js/database.js b/activities/econ-words-new/js/database.js
new file mode 100644
index 0000000..c4e28a0
--- /dev/null
+++ b/activities/econ-words-new/js/database.js
@@ -0,0 +1,311 @@
+/**
+ * Database Module for Econ Words Game
+ * Handles interaction with Supabase for leaderboard and user stats
+ */
+
+const EconWordsDB = {
+  // Table references
+  tables: {
+    leaderboard: 'econ_terms_leaderboard',
+    userStats: 'econ_terms_user_stats'
+  },
+
+  // Initialize the database module
+  init: async function() {
+    console.log('Initializing Econ Words DB module...');
+    
+    if (!window.supabaseClient) {
+      console.error('Supabase client not available for DB operations');
+      return false;
+    }
+    
+    // Verify tables exist
+    try {
+      const leaderboardExists = await this._checkTableExists(this.tables.leaderboard);
+      const userStatsExists = await this._checkTableExists(this.tables.userStats);
+      
+      console.log(`Table status - Leaderboard: ${leaderboardExists ? 'exists' : 'missing'}, User Stats: ${userStatsExists ? 'exists' : 'missing'}`);
+      
+      return leaderboardExists && userStatsExists;
+    } catch (error) {
+      console.error('Error checking tables:', error);
+      return false;
+    }
+  },
+
+  // Check if table exists
+  _checkTableExists: async function(tableName) {
+    try {
+      // Only count rows to check if the table exists
+      const { count, error } = await supabaseClient
+        .from(tableName)
+        .select('*', { count: 'exact', head: true })
+        .limit(0);
+      
+      if (error) {
+        console.warn(`Table ${tableName} error:`, error);
+        return false;
+      }
+      
+      return true; // Table exists and is accessible
+    } catch (error) {
+      console.warn(`Error checking table ${tableName}:`, error);
+      return false;
+    }
+  },
+
+  // Save game score to leaderboard
+  saveScore: async function(scoreData) {
+    if (!window.supabaseClient) {
+      console.error('Supabase client not available for saving score');
+      return { success: false, error: 'Database not available' };
+    }
+
+    // Get current user
+    const currentUser = window.EconWordsAuth?.getCurrentUser();
+    if (!currentUser) {
+      console.error('User information not available for saving score');
+      return { success: false, error: 'User not authenticated' };
+    }
+
+    try {
+      // Prepare score record
+      const scoreRecord = {
+        user_id: currentUser.id,
+        user_name: currentUser.name || 'Unknown Player',
+        score: scoreData.score || 0,
+        term: scoreData.term || '',
+        attempts: scoreData.attempts || 0,
+        won: scoreData.won || false,
+        time_taken: scoreData.timeTaken || 0,
+        section_id: currentUser.sectionId || null
+      };
+
+      // Insert score into leaderboard
+      const { data, error } = await supabaseClient
+        .from(this.tables.leaderboard)
+        .insert(scoreRecord)
+        .select()
+        .single();
+
+      if (error) {
+        console.error('Error saving score:', error);
+        return { success: false, error: error.message };
+      }
+
+      console.log('Score saved successfully:', data);
+      
+      // Update user stats
+      await this._updateUserStats(scoreData);
+      
+      return { success: true, data };
+    } catch (error) {
+      console.error('Error saving score:', error);
+      return { success: false, error: error.message };
+    }
+  },
+
+  // Update user stats based on new score
+  _updateUserStats: async function(scoreData) {
+    if (!window.supabaseClient) {
+      return { success: false, error: 'Database not available' };
+    }
+
+    const currentUser = window.EconWordsAuth?.getCurrentUser();
+    if (!currentUser) {
+      return { success: false, error: 'User not authenticated' };
+    }
+
+    try {
+      // Check if user stats record exists
+      const { data: existingStats, error: fetchError } = await supabaseClient
+        .from(this.tables.userStats)
+        .select('*')
+        .eq('user_id', currentUser.id)
+        .maybeSingle();
+
+      if (fetchError) {
+        console.error('Error fetching user stats:', fetchError);
+        return { success: false, error: fetchError.message };
+      }
+
+      // Calculate new stats
+      const newStreak = scoreData.won ? (existingStats?.streak || 0) + 1 : 0;
+      const newHighScore = Math.max(scoreData.score || 0, existingStats?.high_score || 0);
+      const newGamesPlayed = (existingStats?.games_played || 0) + 1;
+
+      if (existingStats) {
+        // Update existing record
+        const { error: updateError } = await supabaseClient
+          .from(this.tables.userStats)
+          .update({
+            streak: newStreak,
+            high_score: newHighScore,
+            games_played: newGamesPlayed,
+            updated_at: new Date().toISOString()
+          })
+          .eq('id', existingStats.id);
+
+        if (updateError) {
+          console.error('Error updating user stats:', updateError);
+          return { success: false, error: updateError.message };
+        }
+      } else {
+        // Create new record
+        const { error: insertError } = await supabaseClient
+          .from(this.tables.userStats)
+          .insert({
+            user_id: currentUser.id,
+            streak: newStreak,
+            high_score: newHighScore,
+            games_played: newGamesPlayed
+          });
+
+        if (insertError) {
+          console.error('Error creating user stats:', insertError);
+          return { success: false, error: insertError.message };
+        }
+      }
+
+      return { success: true };
+    } catch (error) {
+      console.error('Error updating user stats:', error);
+      return { success: false, error: error.message };
+    }
+  },
+
+  // Get user stats
+  getUserStats: async function() {
+    if (!window.supabaseClient) {
+      console.error('Supabase client not available for getting user stats');
+      return {
+        highScore: 0,
+        streak: 0,
+        gamesPlayed: 0,
+        rank: '-'
+      };
+    }
+
+    const currentUser = window.EconWordsAuth?.getCurrentUser();
+    if (!currentUser) {
+      return {
+        highScore: 0,
+        streak: 0,
+        gamesPlayed: 0,
+        rank: '-'
+      };
+    }
+
+    try {
+      // Get user stats
+      const { data: stats, error } = await supabaseClient
+        .from(this.tables.userStats)
+        .select('*')
+        .eq('user_id', currentUser.id)
+        .maybeSingle();
+
+      if (error) {
+        console.error('Error getting user stats:', error);
+        return {
+          highScore: 0,
+          streak: 0,
+          gamesPlayed: 0,
+          rank: '-'
+        };
+      }
+
+      // Get user rank by getting count of users with higher scores
+      const { count, error: rankError } = await supabaseClient
+        .from(this.tables.userStats)
+        .select('*', { count: 'exact' })
+        .gt('high_score', stats?.high_score || 0);
+
+      if (rankError) {
+        console.error('Error getting user rank:', rankError);
+      }
+
+      // Return formatted stats
+      return {
+        highScore: stats?.high_score || 0,
+        streak: stats?.streak || 0,
+        gamesPlayed: stats?.games_played || 0,
+        rank: rankError ? '-' : (count + 1).toString()
+      };
+    } catch (error) {
+      console.error('Error getting user stats:', error);
+      return {
+        highScore: 0,
+        streak: 0,
+        gamesPlayed: 0,
+        rank: '-'
+      };
+    }
+  },
+
+  // Get leaderboard data
+  getLeaderboard: async function(options = {}) {
+    if (!window.supabaseClient) {
+      console.error('Supabase client not available for getting leaderboard');
+      return [];
+    }
+
+    const {
+      limit = 10,
+      timeFilter = 'all', // 'all', 'day', 'week', 'month'
+      sectionId = null
+    } = options;
+
+    try {
+      // Start query builder
+      let query = supabaseClient
+        .from(this.tables.leaderboard)
+        .select('*');
+
+      // Apply time filter
+      if (timeFilter !== 'all') {
+        const now = new Date();
+        let startDate;
+
+        if (timeFilter === 'day') {
+          startDate = new Date(now.setDate(now.getDate() - 1));
+        } else if (timeFilter === 'week') {
+          startDate = new Date(now.setDate(now.getDate() - 7));
+        } else if (timeFilter === 'month') {
+          startDate = new Date(now.setMonth(now.getMonth() - 1));
+        }
+
+        if (startDate) {
+          query = query.gte('created_at', startDate.toISOString());
+        }
+      }
+
+      // Apply section filter
+      if (sectionId) {
+        query = query.eq('section_id', sectionId);
+      }
+
+      // Order and limit
+      const { data, error } = await query
+        .order('score', { ascending: false })
+        .limit(limit);
+
+      if (error) {
+        console.error('Error getting leaderboard:', error);
+        return [];
+      }
+
+      return data || [];
+    } catch (error) {
+      console.error('Error getting leaderboard:', error);
+      return [];
+    }
+  }
+};
+
+// Initialize when DOM is loaded
+document.addEventListener('DOMContentLoaded', () => {
+  EconWordsDB.init();
+});
+
+// Export as global object
+window.EconWordsDB = EconWordsDB;
diff --git a/activities/econ-words-new/js/env.js b/activities/econ-words-new/js/env.js
new file mode 100644
index 0000000..9572c85
--- /dev/null
+++ b/activities/econ-words-new/js/env.js
@@ -0,0 +1,14 @@
+/**
+ * Environment setup for Econ Words Game
+ * This file provides the Supabase credentials for the game
+ */
+
+// Set the Supabase URL and key for the Econ Words game
+const supabaseUrl = 'https://bvvkevmqnnlecghyraao.supabase.co';
+const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ2dmtldm1xbm5sZWNnaHlyYWFvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MDAzNDEsImV4cCI6MjA2MDQ3NjM0MX0.UY_H91jIbbZWq6A-l7XbdyF6s3rSoBVcJfawhZ2CyVg';
+
+// Make these available as window variables
+window.supabaseUrl = supabaseUrl;
+window.supabaseKey = supabaseKey;
+
+console.log('Econ Words environment loaded with Supabase credentials');
diff --git a/activities/econ-words-new/js/game.js b/activities/econ-words-new/js/game.js
new file mode 100644
index 0000000..48d38cb
--- /dev/null
+++ b/activities/econ-words-new/js/game.js
@@ -0,0 +1,612 @@
+/**
+ * Game Logic for Econ Words
+ * This file contains the core game logic 
+ */
+
+const EconWordsGame = {
+  // Game state
+  state: {
+    currentTerm: null,
+    attempts: [],
+    maxAttempts: 6,
+    currentAttempt: '',
+    gameOver: false,
+    won: false,
+    keyStates: {},
+    isLoading: true,
+    score: 0,
+    startTime: null,
+    endTime: null,
+    streak: 0,
+    hintLevel: 0,
+    gameCount: 0
+  },
+
+  // Initialize the game
+  init: async function() {
+    console.log('Initializing EconWords game...');
+    
+    // Show loading state
+    this.state.isLoading = true;
+    this._showLoadingMessage('Loading game...');
+    
+    // Set a timeout to track initialization progress
+    this._initTimeout = setTimeout(() => {
+      if (this.state.isLoading) {
+        console.warn('Game initialization taking too long, using fallback');
+        // Use a fallback term
+        this.state.currentTerm = {
+          term: "INFLATION",
+          definition: "The rate at which the general level of prices for goods and services is rising.",
+          hint1: "Measuring the Macroeconomy",
+          hint2: "Prices",
+          hint3: "The rate at which the general level of prices for goods and services is rising."
+        };
+        this._finishInitialization();
+      }
+    }, 3000);
+
+    try {
+      // Wait for terms data to be ready
+      await EconTermsData.init();
+
+      // Get URL parameters
+      const urlParams = new URLSearchParams(window.location.search);
+      const isDaily = urlParams.get('daily') === 'true';
+
+      // Get a term based on whether it's a daily game or not
+      if (isDaily) {
+        const dailyTerm = window.EconTermsData.getDailyTerm();
+        this.state.currentTerm = dailyTerm;
+      } else {
+        const randomTerm = window.EconTermsData.getRandomTerm();
+        this.state.currentTerm = randomTerm;
+      }
+
+      this._finishInitialization();
+    } catch (error) {
+      console.error('Error initializing game with terms data:', error);
+      // Use fallback if there was an error
+      if (this.state.isLoading) {
+        this.state.currentTerm = {
+          term: "INFLATION",
+          definition: "The rate at which the general level of prices for goods and services is rising.",
+          hint1: "Measuring the Macroeconomy",
+          hint2: "Prices",
+          hint3: "The rate at which the general level of prices for goods and services is rising."
+        };
+        this._finishInitialization();
+      }
+    }
+    
+    // Listen for auth ready event
+    window.addEventListener('econwords-auth-ready', () => {
+      this._updateUserInfo();
+      this._loadUserStats();
+    });
+  },
+
+  // Finish initialization after term is loaded
+  _finishInitialization: function() {
+    // Clear timeout if set
+    if (this._initTimeout) {
+      clearTimeout(this._initTimeout);
+    }
+    
+    // Set game count to 1 for the first game
+    if (this.state.gameCount === 0) {
+      this.state.gameCount = 1;
+    }
+
+    // Reset game state
+    this._resetGameState();
+
+    // Update the UI
+    this._updateGameTitle();
+    this._updateGameHint();
+    this._loadUserStats();
+
+    // Set up event listeners
+    this._setupEventListeners();
+
+    // Hide loading state
+    this.state.isLoading = false;
+    this._hideLoadingMessage();
+
+    console.log('Game initialized with term:', this.state.currentTerm.term);
+    
+    // Start game timer
+    this.state.startTime = new Date();
+  },
+
+  // Reset game state for a new game
+  _resetGameState: function() {
+    this.state.attempts = [];
+    this.state.currentAttempt = '';
+    this.state.gameOver = false;
+    this.state.won = false;
+    this.state.keyStates = {};
+    this.state.score = 0;
+    this.state.hintLevel = 0;
+    this.state.startTime = null;
+    this.state.endTime = null;
+    
+    // Clear the game board
+    this._updateGameBoard();
+    this._updateKeyboard();
+  },
+
+  // Set up event listeners
+  _setupEventListeners: function() {
+    // Keyboard event listener
+    document.addEventListener('keydown', (e) => {
+      if (this.state.gameOver || this.state.isLoading) return;
+      
+      if (e.key === 'Enter') {
+        this._handleSubmitAttempt();
+      } else if (e.key === 'Backspace') {
+        this._handleBackspace();
+      } else if (/^[a-zA-Z]$/.test(e.key)) {
+        this._handleKeyPress(e.key.toUpperCase());
+      }
+    });
+
+    // On-screen keyboard clicks
+    document.querySelectorAll('.key').forEach(key => {
+      key.addEventListener('click', () => {
+        if (this.state.gameOver || this.state.isLoading) return;
+        
+        const keyValue = key.getAttribute('data-key');
+        if (keyValue === 'ENTER') {
+          this._handleSubmitAttempt();
+        } else if (keyValue === 'BACKSPACE') {
+          this._handleBackspace();
+        } else {
+          this._handleKeyPress(keyValue);
+        }
+      });
+    });
+
+    // Play again button
+    const playAgainButton = document.getElementById('play-again-btn');
+    if (playAgainButton) {
+      playAgainButton.addEventListener('click', () => {
+        this._startNewGame();
+      });
+    }
+
+  },
+
+  // Handle key press
+  _handleKeyPress: function(key) {
+    // Only allow alphabetic input or space
+    if (!/^[A-Z ]$/.test(key)) return;
+    
+    // Only allow input if current attempt has room and game is not over
+    const currentTerm = this.state.currentTerm.term;
+    if (this.state.currentAttempt.length < currentTerm.length && !this.state.gameOver) {
+      // Update the current attempt
+      this.state.currentAttempt += key;
+      
+      // Update the UI
+      this._updateGameBoard();
+    }
+  },
+
+  // Handle backspace
+  _handleBackspace: function() {
+    if (this.state.currentAttempt.length > 0 && !this.state.gameOver) {
+      // Remove last character
+      this.state.currentAttempt = this.state.currentAttempt.slice(0, -1);
+      
+      // Update the UI
+      this._updateGameBoard();
+    }
+  },
+
+  // Handle submit attempt
+  _handleSubmitAttempt: function() {
+    // Don't process if game is over
+    if (this.state.gameOver) return;
+    
+    const currentTerm = this.state.currentTerm.term;
+    
+    // Only allow submission if current attempt is the correct length
+    if (this.state.currentAttempt.length === currentTerm.length) {
+      // Add attempt to list
+      this.state.attempts.push(this.state.currentAttempt);
+      
+      // Check if attempt is correct
+      if (this.state.currentAttempt === currentTerm) {
+        this._handleWin();
+      } else if (this.state.attempts.length >= this.state.maxAttempts) {
+        this._handleLoss();
+      } else {
+        // Automatically show next hint after odd-numbered attempts
+        if (this.state.attempts.length % 2 === 1 && this.state.hintLevel < 2) {
+          this.state.hintLevel++;
+          this._updateGameHint();
+          this._showNotification('New hint unlocked!');
+        }
+      }
+      
+      // Reset current attempt
+      this.state.currentAttempt = '';
+      
+      // Update the UI
+      this._updateGameBoard();
+      this._updateKeyboard();
+    } else {
+      this._showNotification('Not enough letters');
+    }
+  },
+
+  // Handle win
+  _handleWin: function() {
+    this.state.gameOver = true;
+    this.state.won = true;
+    this.state.endTime = new Date();
+    
+    // Calculate score
+    this._calculateScore();
+    
+    // Update streak
+    this.state.streak++;
+    
+    // Save score to database
+    this._saveGameResult();
+    
+    // Show win message
+    setTimeout(() => {
+      this._showGameOverModal(true);
+    }, 1500);
+  },
+
+  // Handle loss
+  _handleLoss: function() {
+    this.state.gameOver = true;
+    this.state.won = false;
+    this.state.endTime = new Date();
+    this.state.streak = 0;
+    
+    // Save game result
+    this._saveGameResult();
+    
+    // Show loss message
+    setTimeout(() => {
+      this._showGameOverModal(false);
+    }, 1500);
+  },
+
+  // Calculate score based on attempts, time, and term length
+  _calculateScore: function() {
+    // Base score depends on attempts left
+    const attemptsLeft = this.state.maxAttempts - this.state.attempts.length;
+    let score = attemptsLeft * 100;
+    
+    // Bonus for term length (10 points per character)
+    score += this.state.currentTerm.term.length * 10;
+    
+    // Bonus for multi-word terms (50 points per word after the first)
+    const wordCount = this.state.currentTerm.term.split(' ').length;
+    if (wordCount > 1) {
+      score += (wordCount - 1) * 50;
+    }
+    
+    // Bonus for streak
+    score += this.state.streak * 25;
+    
+    // Time bonus (faster = more points, max 100 bonus points)
+    const timeTaken = this.state.endTime - this.state.startTime; // milliseconds
+    const timeBonus = Math.max(0, 100 - Math.floor(timeTaken / 1000)); // 1 point per second under 100 seconds
+    score += timeBonus;
+    
+    this.state.score = score;
+    return score;
+  },
+
+  // Save game result to the database
+  _saveGameResult: async function() {
+    // Skip if database is not initialized
+    if (!window.EconWordsDB) {
+      console.error('Database module not available');
+      return;
+    }
+    
+    // Prepare score data
+    const scoreData = {
+      score: this.state.score,
+      term: this.state.currentTerm.term,
+      attempts: this.state.attempts.length,
+      won: this.state.won,
+      timeTaken: this.state.endTime - this.state.startTime
+    };
+    
+    // Save to database
+    try {
+      const result = await window.EconWordsDB.saveScore(scoreData);
+      console.log('Game result saved:', result);
+      
+      // Update user stats display
+      this._loadUserStats();
+    } catch (error) {
+      console.error('Error saving game result:', error);
+    }
+  },
+
+  // Load user stats from database
+  _loadUserStats: async function() {
+    // Skip if database is not initialized
+    if (!window.EconWordsDB) {
+      console.error('Database module not available');
+      return;
+    }
+    
+    try {
+      const stats = await window.EconWordsDB.getUserStats();
+      
+      // Update UI with stats
+      document.getElementById('user-best-score').textContent = stats.highScore;
+      document.getElementById('user-current-streak').textContent = stats.streak;
+      document.getElementById('user-games-played').textContent = stats.gamesPlayed;
+      document.getElementById('user-rank').textContent = stats.rank;
+      
+      // Update local state
+      this.state.streak = stats.streak;
+    } catch (error) {
+      console.error('Error loading user stats:', error);
+    }
+  },
+
+  // Show the next hint level (internal function)
+  _showNextHint: function() {
+    if (this.state.hintLevel < 2) {
+      this.state.hintLevel++;
+      this._updateGameHint();
+    }
+  },
+
+  // Start a new game
+  _startNewGame: function() {
+    // Hide any modals
+    $('#resultModal').modal('hide');
+    
+    // Get a new term
+    const randomTerm = window.EconTermsData.getRandomTerm();
+    this.state.currentTerm = randomTerm;
+    
+    // Increment game count
+    this.state.gameCount++;
+    
+    // Reset game state but keep streak
+    this._resetGameState();
+    
+    // Update UI
+    this._updateGameTitle();
+    this._updateGameHint();
+    this._updateGameBoard();
+    this._updateKeyboard();
+    
+    // Start game timer
+    this.state.startTime = new Date();
+    
+    console.log('New game started with term:', this.state.currentTerm.term);
+  },
+
+  // Update user info display
+  _updateUserInfo: function() {
+    const user = window.EconWordsAuth?.getCurrentUser();
+    if (!user) return;
+    
+    const userNameElement = document.getElementById('user-name');
+    if (userNameElement) {
+      userNameElement.textContent = user.name;
+    }
+    
+    // Show/hide sign out button based on guest status
+    const signOutButton = document.getElementById('sign-out-btn');
+    if (signOutButton) {
+      signOutButton.style.display = user.isGuest ? 'none' : 'inline-block';
+    }
+  },
+
+  // UI Helper Functions
+  _showLoadingMessage: function(message) {
+    const loadingElement = document.getElementById('loading-message');
+    if (loadingElement) {
+      loadingElement.textContent = message;
+      loadingElement.style.display = 'block';
+    }
+  },
+  
+  _hideLoadingMessage: function() {
+    const loadingElement = document.getElementById('loading-message');
+    if (loadingElement) {
+      loadingElement.style.display = 'none';
+    }
+  },
+  
+  _updateGameTitle: function() {
+    const gameTitleElement = document.getElementById('game-title');
+    if (gameTitleElement) {
+      const gameNumber = this.state.gameCount;
+      gameTitleElement.textContent = `Econ Words #${gameNumber}`;
+    }
+  },
+  
+  _updateGameHint: function() {
+    const hintElement = document.getElementById('game-hint');
+    if (!hintElement || !this.state.currentTerm) return;
+    
+    let hintText = '';
+    
+    switch (this.state.hintLevel) {
+      case 0:
+        hintText = `Topic: ${this.state.currentTerm.hint1}`;
+        break;
+      case 1:
+        hintText = `Concept: ${this.state.currentTerm.hint2}`;
+        break;
+      case 2:
+        hintText = `Definition: ${this.state.currentTerm.hint3}`;
+        break;
+      default:
+        hintText = `Topic: ${this.state.currentTerm.hint1}`;
+    }
+    
+    hintElement.textContent = hintText;
+  },
+  
+  _updateGameBoard: function() {
+    const gameBoard = document.getElementById('game-board');
+    if (!gameBoard || !this.state.currentTerm) return;
+    
+    // Clear existing rows
+    gameBoard.innerHTML = '';
+    
+    const wordLength = this.state.currentTerm.term.length;
+    
+    // Create grid template columns based on term length
+    // Detect spaces in the term and make those cells narrower
+    const termChars = this.state.currentTerm.term.split('');
+    const colsWidth = termChars.map(char => char === ' ' ? '10px' : '52px').join(' ');
+    
+    // Update all rows
+    for (let i = 0; i < this.state.maxAttempts; i++) {
+      const row = document.createElement('div');
+      row.className = 'game-row';
+      row.style.gridTemplateColumns = colsWidth;
+      
+      const attempt = i < this.state.attempts.length
+        ? this.state.attempts[i]
+        : (i === this.state.attempts.length ? this.state.currentAttempt : '');
+      
+      // Fill in the row with cells
+      for (let j = 0; j < wordLength; j++) {
+        const cell = document.createElement('div');
+        
+        // Check if this position should be a space
+        const isSpace = this.state.currentTerm.term[j] === ' ';
+        cell.className = isSpace ? 'game-cell space' : 'game-cell';
+        
+        if (attempt && j < attempt.length) {
+          // This cell has a letter
+          const attemptChar = attempt[j];
+          cell.textContent = isSpace ? '' : attemptChar;
+          cell.classList.add('filled');
+          
+          // For completed attempts, add status classes
+          if (i < this.state.attempts.length) {
+            const correctChar = this.state.currentTerm.term[j];
+            
+            if (attemptChar === correctChar) {
+              cell.classList.add('correct');
+              this._updateKeyState(attemptChar, 'correct');
+            } else if (this.state.currentTerm.term.includes(attemptChar) && !isSpace) {
+              cell.classList.add('present');
+              this._updateKeyState(attemptChar, 'present');
+            } else if (!isSpace) {
+              cell.classList.add('absent');
+              this._updateKeyState(attemptChar, 'absent');
+            }
+          }
+        }
+        
+        row.appendChild(cell);
+      }
+      
+      gameBoard.appendChild(row);
+    }
+  },
+  
+  _updateKeyboard: function() {
+    const keys = document.querySelectorAll('.key');
+    
+    keys.forEach(key => {
+      const keyValue = key.getAttribute('data-key');
+      const keyState = this.state.keyStates[keyValue];
+      
+      // Reset all status classes
+      key.classList.remove('correct', 'present', 'absent');
+      
+      // Apply new status class if exists
+      if (keyState) {
+        key.classList.add(keyState);
+      }
+    });
+  },
+  
+  _updateKeyState: function(key, state) {
+    const currentState = this.state.keyStates[key];
+    
+    // Only update if the new state is "better"
+    // correct > present > absent
+    if (!currentState || 
+        (currentState === 'absent' && (state === 'present' || state === 'correct')) ||
+        (currentState === 'present' && state === 'correct')) {
+      this.state.keyStates[key] = state;
+    }
+  },
+  
+  _showGameOverModal: function(won) {
+    const modalTitle = document.getElementById('resultModalLabel');
+    const resultMessage = document.getElementById('result-message');
+    const explanation = document.getElementById('explanation');
+    
+    if (modalTitle) modalTitle.textContent = won ? 'You won!' : 'Game Over';
+    
+    if (resultMessage) {
+      if (won) {
+        resultMessage.innerHTML = `
+          <h4>Congratulations!</h4>
+          <p>You correctly guessed <strong>${this.state.currentTerm.term}</strong> in ${this.state.attempts.length} ${this.state.attempts.length === 1 ? 'try' : 'tries'}!</p>
+          <div class="score-display">
+            <div class="score-value">${this.state.score}</div>
+            <div class="score-label">POINTS</div>
+          </div>
+        `;
+      } else {
+        resultMessage.innerHTML = `
+          <h4>Better luck next time</h4>
+          <p>The correct term was <strong>${this.state.currentTerm.term}</strong>.</p>
+        `;
+      }
+    }
+    
+    if (explanation) {
+      explanation.innerHTML = `
+        <div class="term-definition">
+          <h5>${this.state.currentTerm.term}</h5>
+          <p>${this.state.currentTerm.hint3}</p>
+          <p><small>Topic: ${this.state.currentTerm.hint1}</small></p>
+        </div>
+      `;
+    }
+    
+    // Show the modal
+    $('#resultModal').modal('show');
+  },
+  
+  _showNotification: function(message) {
+    const notification = document.getElementById('notification');
+    if (!notification) return;
+    
+    // Set message and show
+    notification.textContent = message;
+    notification.classList.add('show');
+    
+    // Hide after 2 seconds
+    setTimeout(() => {
+      notification.classList.remove('show');
+    }, 2000);
+  }
+};
+
+// Initialize game when DOM is loaded
+document.addEventListener('DOMContentLoaded', () => {
+  // Initialize game
+  EconWordsGame.init();
+});
+
+// Export as global object
+window.EconWordsGame = EconWordsGame;
diff --git a/activities/econ-words-new/js/leaderboard.js b/activities/econ-words-new/js/leaderboard.js
new file mode 100644
index 0000000..301fbb4
--- /dev/null
+++ b/activities/econ-words-new/js/leaderboard.js
@@ -0,0 +1,223 @@
+/**
+ * Leaderboard Module for Econ Words Game
+ * Handles displaying and updating the leaderboard
+ */
+
+const EconWordsLeaderboard = {
+  // State
+  state: {
+    scores: [],
+    filteredScores: [],
+    sortField: 'score',
+    sortDirection: 'desc',
+    timeFilter: 'all',
+    sectionFilter: 'all',
+    isStandalonePage: false
+  },
+
+  // Initialize the leaderboard
+  init: function() {
+    console.log('Initializing leaderboard...');
+    
+    // Check if this is the standalone leaderboard page
+    this.state.isStandalonePage = window.location.pathname.includes('leaderboard.html');
+    
+    // Listen for auth ready event
+    window.addEventListener('econwords-auth-ready', async () => {
+      // Load leaderboard data
+      await this.loadLeaderboard();
+      
+      // Set up event listeners
+      this._setupEventListeners();
+    });
+  },
+
+  // Load leaderboard data from database
+  loadLeaderboard: async function() {
+    if (!window.EconWordsDB) {
+      console.error('Database module not available for leaderboard');
+      return;
+    }
+
+    try {
+      // Get options from state
+      const options = {
+        timeFilter: this.state.timeFilter,
+        limit: this.state.isStandalonePage ? 50 : 10
+      };
+
+      // Add section filter if applicable
+      if (this.state.sectionFilter !== 'all') {
+        options.sectionId = this.state.sectionFilter;
+      }
+
+      // Get leaderboard data
+      const scores = await window.EconWordsDB.getLeaderboard(options);
+      this.state.scores = scores;
+      this.state.filteredScores = [...scores];
+      
+      // Sort scores
+      this._sortScores();
+      
+      // Update UI
+      this._updateLeaderboardUI();
+    } catch (error) {
+      console.error('Error loading leaderboard:', error);
+    }
+  },
+
+  // Sort scores based on current sort field and direction
+  _sortScores: function() {
+    const { sortField, sortDirection } = this.state;
+    
+    // Map database field names to score object field names
+    const fieldMap = {
+      'score': 'score',
+      'created_at': 'created_at',
+      'user_name': 'user_name',
+      'attempts': 'attempts'
+    };
+    
+    const field = fieldMap[sortField] || 'score';
+    
+    this.state.filteredScores.sort((a, b) => {
+      let valA = a[field];
+      let valB = b[field];
+      
+      // Handle dates
+      if (field === 'created_at') {
+        valA = new Date(valA);
+        valB = new Date(valB);
+      }
+      
+      // Compare based on sort direction
+      if (sortDirection === 'asc') {
+        return valA > valB ? 1 : valA < valB ? -1 : 0;
+      } else {
+        return valA < valB ? 1 : valA > valB ? -1 : 0;
+      }
+    });
+  },
+
+  // Set up event listeners
+  _setupEventListeners: function() {
+    // Sort buttons
+    document.querySelectorAll('.leaderboard-sort').forEach(btn => {
+      btn.addEventListener('click', (e) => {
+        const field = e.currentTarget.getAttribute('data-sort');
+        
+        if (field === this.state.sortField) {
+          // Toggle direction if same field
+          this.state.sortDirection = this.state.sortDirection === 'asc' ? 'desc' : 'asc';
+        } else {
+          // Set new field and reset direction
+          this.state.sortField = field;
+          this.state.sortDirection = 'desc';
+        }
+        
+        this._sortScores();
+        this._updateLeaderboardUI();
+      });
+    });
+    
+    // Time filter dropdown
+    const timeFilter = document.getElementById('time-filter');
+    if (timeFilter) {
+      timeFilter.addEventListener('change', (e) => {
+        this.state.timeFilter = e.target.value;
+        this.loadLeaderboard();
+      });
+    }
+    
+    // Section filter dropdown (for standalone page)
+    if (this.state.isStandalonePage) {
+      const sectionFilter = document.getElementById('section-filter');
+      if (sectionFilter) {
+        sectionFilter.addEventListener('change', (e) => {
+          this.state.sectionFilter = e.target.value;
+          this.loadLeaderboard();
+        });
+      }
+    }
+    
+    // Refresh button
+    const refreshButton = document.getElementById('refresh-leaderboard');
+    if (refreshButton) {
+      refreshButton.addEventListener('click', () => {
+        this.loadLeaderboard();
+      });
+    }
+  },
+
+  // Update the leaderboard UI
+  _updateLeaderboardUI: function() {
+    const { filteredScores, sortField, sortDirection } = this.state;
+    
+    // Update table header indicators
+    document.querySelectorAll('.leaderboard-sort').forEach(btn => {
+      const field = btn.getAttribute('data-sort');
+      const indicator = btn.querySelector('.sort-indicator');
+      
+      if (indicator) {
+        if (field === sortField) {
+          indicator.textContent = sortDirection === 'asc' ? '↑' : '↓';
+          indicator.style.opacity = '1';
+        } else {
+          indicator.textContent = '↕';
+          indicator.style.opacity = '0.3';
+        }
+      }
+    });
+    
+    // Update table rows
+    const tableBody = document.querySelector('.leaderboard-table tbody');
+    if (!tableBody) return;
+    
+    // Clear existing rows
+    tableBody.innerHTML = '';
+    
+    if (filteredScores.length === 0) {
+      const emptyRow = document.createElement('tr');
+      emptyRow.innerHTML = `
+        <td colspan="5" class="text-center">No scores available</td>
+      `;
+      tableBody.appendChild(emptyRow);
+      return;
+    }
+    
+    // Add each score as a row
+    filteredScores.forEach((score, index) => {
+      const row = document.createElement('tr');
+      
+      // Highlight current user's scores
+      const currentUser = window.EconWordsAuth?.getCurrentUser();
+      if (currentUser && score.user_id === currentUser.id) {
+        row.classList.add('current-user');
+      }
+      
+      // Format date
+      const date = new Date(score.created_at);
+      const formattedDate = date.toLocaleDateString() + ' ' + 
+                           date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
+      
+      // Create row content
+      row.innerHTML = `
+        <td>${index + 1}</td>
+        <td>${score.user_name}</td>
+        <td class="text-center">${score.score}</td>
+        <td class="text-center">${score.attempts}</td>
+        <td>${formattedDate}</td>
+      `;
+      
+      tableBody.appendChild(row);
+    });
+  }
+};
+
+// Initialize when DOM is loaded
+document.addEventListener('DOMContentLoaded', () => {
+  EconWordsLeaderboard.init();
+});
+
+// Export as global object
+window.EconWordsLeaderboard = EconWordsLeaderboard;
diff --git a/activities/econ-words-new/js/supabase-client.js b/activities/econ-words-new/js/supabase-client.js
new file mode 100644
index 0000000..c59429b
--- /dev/null
+++ b/activities/econ-words-new/js/supabase-client.js
@@ -0,0 +1,41 @@
+/**
+ * Supabase Client for Econ Words Game
+ * This file initializes the Supabase client and provides connection utilities
+ */
+
+// Initialize Supabase client with environment variables
+const initSupabaseClient = () => {
+  // Check if supabase is available
+  if (typeof supabase === 'undefined') {
+    console.error('Supabase JS library not loaded');
+    return null;
+  }
+
+  // Check if environment variables are available
+  if (!supabaseUrl || !supabaseKey) {
+    console.error('Supabase URL or key not available');
+    return null;
+  }
+
+  try {
+    // Create and return the client
+    return supabase.createClient(supabaseUrl, supabaseKey);
+  } catch (error) {
+    console.error('Error initializing Supabase client:', error);
+    return null;
+  }
+};
+
+// Initialize the client when the script loads
+const supabaseClient = initSupabaseClient();
+
+// Utility function to check if the client is connected
+const isSupabaseConnected = () => {
+  return supabaseClient !== null;
+};
+
+// Export the client and utilities as global variables
+window.supabaseClient = supabaseClient;
+window.isSupabaseConnected = isSupabaseConnected;
+
+console.log('Supabase client initialization ' + (isSupabaseConnected() ? 'successful' : 'failed'));
diff --git a/activities/econ-words-new/js/terms-data.js b/activities/econ-words-new/js/terms-data.js
new file mode 100644
index 0000000..c4e9f9f
--- /dev/null
+++ b/activities/econ-words-new/js/terms-data.js
@@ -0,0 +1,195 @@
+/**
+ * Economics Terms Data Module for Econ Words Game
+ * This module provides the economic terms data for the game
+ * 
+ * Data source: The economics terms are loaded from a CSV file located at data/econ-terms.csv
+ * The CSV file contains economic terms, chapter titles as hints, related words, and definitions.
+ * If the CSV file fails to load, a minimal set of hardcoded terms is used as fallback.
+ */
+
+const EconTermsData = {
+  // Path to the CSV file containing economics terms
+  csvFilePath: 'data/econ-terms.csv',
+  
+  // Raw CSV data as fallback in case file can't be loaded
+  rawCSV: '',
+
+  // Parsed terms array
+  terms: [],
+
+  // Possible challenges/categories for a daily random term
+  challenges: [
+    { name: "Supply & Demand", filter: t => t.hint1.includes("Supply and Demand") },
+    { name: "Macroeconomics", filter: t => t.hint1.includes("Measuring the Macroeconomy") },
+    { name: "Basics", filter: t => t.hint1.includes("Introduction to Economics") },
+    { name: "Multi-Word Terms", filter: t => t.term.includes(" ") }
+  ],
+
+  // Initialize and fetch data
+  init: async function() {
+    try {
+      // Try to load CSV file
+      await this.loadCsvFile();
+    } catch (error) {
+      console.error('Error loading CSV file:', error);
+      console.warn('Using fallback hardcoded terms');
+      // If loading fails, use backup data
+      this.terms = this.getMinimalFallbackTerms();
+    }
+    
+    console.log(`Econ Terms Data initialized with ${this.terms.length} terms`);
+    return this.terms;
+  },
+  
+  // Load CSV file using fetch
+  loadCsvFile: async function() {
+    try {
+      const response = await fetch(this.csvFilePath);
+      
+      if (!response.ok) {
+        throw new Error(`Failed to load CSV file: ${response.status} ${response.statusText}`);
+      }
+      
+      this.rawCSV = await response.text();
+      this.parseData();
+    } catch (error) {
+      console.error('Error fetching CSV file:', error);
+      throw error;
+    }
+  },
+
+  // Parse CSV string into an array of term objects
+  parseData: function() {
+    if (!this.rawCSV) return;
+    
+    const lines = this.rawCSV.split('\n');
+    this.terms = [];
+    
+    // Skip header row
+    for (let i = 1; i < lines.length; i++) {
+      const line = lines[i].trim();
+      if (!line) continue;
+      
+      // Split by comma, but respect quotes
+      let columns = [];
+      let currentColumn = '';
+      let insideQuotes = false;
+      
+      for (let j = 0; j < line.length; j++) {
+        const char = line[j];
+        
+        if (char === '"') {
+          insideQuotes = !insideQuotes;
+        } else if (char === ',' && !insideQuotes) {
+          columns.push(currentColumn);
+          currentColumn = '';
+        } else {
+          currentColumn += char;
+        }
+      }
+      
+      // Add the last column
+      columns.push(currentColumn);
+      
+      // Create term object
+      if (columns.length >= 4) {
+        this.terms.push({
+          term: columns[0].toUpperCase(),
+          hint1: columns[1],
+          hint2: columns[2],
+          hint3: columns[3].replace(/"/g, '')
+        });
+      }
+    }
+  },
+  
+  // Minimal fallback terms in case all else fails
+  getMinimalFallbackTerms: function() {
+    return [
+      {
+        term: 'DEMAND',
+        hint1: 'Supply and Demand',
+        hint2: 'Consumer',
+        hint3: 'The amount of a good or service that consumers purchase at a particular price.'
+      },
+      {
+        term: 'SUPPLY',
+        hint1: 'Supply and Demand',
+        hint2: 'Producer',
+        hint3: 'The amount of a good that a firm is willing and able to produce at a given price.'
+      },
+      {
+        term: 'INFLATION',
+        hint1: 'Measuring the Macroeconomy',
+        hint2: 'Prices',
+        hint3: 'The rate at which the general level of prices for goods and services is rising.'
+      },
+      {
+        term: 'GDP',
+        hint1: 'Measuring the Macroeconomy',
+        hint2: 'Production',
+        hint3: 'Gross Domestic Product; The total value of all final goods and services produced within a country\'s borders.'
+      },
+      {
+        term: 'ECONOMICS',
+        hint1: 'Introduction to Economics',
+        hint2: 'Decisions',
+        hint3: 'The study of how choices are made given that decision makers face constraints.'
+      }
+    ];
+  },
+
+  // Get all terms
+  getAllTerms: function() {
+    return this.terms;
+  },
+
+  // Get a random term
+  getRandomTerm: function() {
+    if (this.terms.length === 0) {
+      this.terms = this.getMinimalFallbackTerms();
+    }
+    const randomIndex = Math.floor(Math.random() * this.terms.length);
+    return this.terms[randomIndex];
+  },
+
+  // Get a "daily" term based on date
+  getDailyTerm: function() {
+    if (this.terms.length === 0) {
+      this.terms = this.getMinimalFallbackTerms();
+    }
+    
+    // Use current date as seed
+    const today = new Date();
+    const dateString = `${today.getFullYear()}-${today.getMonth() + 1}-${today.getDate()}`;
+    
+    // Create a simple hash from the date string
+    let hash = 0;
+    for (let i = 0; i < dateString.length; i++) {
+      hash = ((hash << 5) - hash) + dateString.charCodeAt(i);
+      hash |= 0; // Convert to 32bit integer
+    }
+    
+    // Use absolute value of hash to pick a term
+    const index = Math.abs(hash) % this.terms.length;
+    
+    return this.terms[index];
+  },
+  
+  // Get a term by its text
+  getTermByText: function(text) {
+    if (this.terms.length === 0) {
+      this.terms = this.getMinimalFallbackTerms();
+    }
+    
+    return this.terms.find(term => term.term.toUpperCase() === text.toUpperCase()) || null;
+  }
+};
+
+// Initialize when script loads
+window.EconTermsData = EconTermsData;
+
+// Execute initialization
+document.addEventListener('DOMContentLoaded', function() {
+  EconTermsData.init();
+});
diff --git a/activities/econ-words/debug.html b/activities/econ-words/debug.html
index 196163c..4600781 100644
--- a/activities/econ-words/debug.html
+++ b/activities/econ-words/debug.html
@@ -7,7 +7,18 @@
     <link rel="stylesheet" href="../../styles.css">
     <style>
         body {
-            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
+                       if (!window.SupabaseDiagnostics?.testAuthentication) {
+                        throw new Error('Supabase diagnostics module not loaded');
+                    }
+                    
+                    const results = await window.SupabaseDiagnostics.testAuthentication();
+                    showResults('auth-results', results);
+                    
+                    // If successful, verify with a quick database test
+                    if (results.success) {
+                        setTimeout(async () => {
+                            try {
+                                // Test with a simple database queryt-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
             line-height: 1.6;
             padding: 20px;
             max-width: 1000px;
@@ -100,7 +111,8 @@
         <h2>Authentication</h2>
         <button id="check-auth" title="Check current authentication status">Check Auth Status</button>
         <button id="refresh-token" title="Force refresh the auth token">Refresh Token</button>
-        <button id="sign-in-anon" class="warning" title="Sign in as an anonymous user">Sign in Anonymously</button>
+        <button id="test-auth" title="Test authentication">Test Authentication</button>
+        <button id="sign-in-email" class="warning" title="Sign in with test email">Sign in with Email</button>
         <button id="sign-out" class="warning" title="Sign out current user">Sign Out</button>
         <div id="auth-results" class="results hidden">Loading...</div>
     </div>
@@ -261,25 +273,78 @@
                 }
             });
             
-            // Sign in anonymously
-            document.getElementById('sign-in-anon').addEventListener('click', async function() {
-                showResults('auth-results', 'Signing in anonymously...');
+            // Test authentication
+            document.getElementById('test-auth').addEventListener('click', async function() {
+                showResults('auth-results', 'Testing authentication...');
+                
+                try {
+                    if (!window.SupabaseDiagnostics) {
+                        throw new Error('Supabase diagnostics module not loaded');
+                    }
+                    
+                    const results = await window.SupabaseDiagnostics.testAuthentication();
+                    showResults('auth-results', results);
+                    
+                    // If successful, verify with a quick database test
+                    if (results.success) {
+                        setTimeout(async () => {
+                            try {
+                                // Test with a simple database query
+                                const testResult = await supabaseClient
+                                    .from('econ_terms_leaderboard')
+                                    .select('*', { count: 'exact' })
+                                    .limit(1);
+                                
+                                const dbResults = {
+                                    dbTestSuccess: !testResult.error,
+                                    count: testResult.count || 0,
+                                    error: testResult.error?.message
+                                };
+                                
+                                showResults('auth-results', {
+                                    ...results,
+                                    dbAccessTest: dbResults
+                                });
+                            } catch (e) {
+                                console.error('Error during database test after anon auth:', e);
+                            }
+                        }, 1000);
+                    }
+                } catch (error) {
+                    showResults('auth-results', { error: error.message }, true);
+                }
+            });
+            
+            // Sign in with email
+            document.getElementById('sign-in-email').addEventListener('click', async function() {
+                showResults('auth-results', 'Signing in with test email...');
                 
                 try {
                     if (!window.supabaseClient) {
                         throw new Error('Supabase client not initialized');
                     }
                     
-                    const { data, error } = await supabaseClient.auth.signInAnonymously();
+                    // Use a test email for debugging - should be changed for a real implementation
+                    const testEmail = 'test@example.com';
+                    const testPassword = 'password123';
+                    
+                    const { data, error } = await supabaseClient.auth.signInWithPassword({
+                        email: testEmail,
+                        password: testPassword
+                    });
                     
                     if (error) {
-                        showResults('auth-results', { error: error.message }, true);
+                        showResults('auth-results', { 
+                            error: error.message,
+                            note: "If this shows an authentication error, you need to create this test user in your Supabase authentication settings"
+                        }, true);
                         return;
                     }
                     
                     showResults('auth-results', {
                         success: true,
                         userId: data.user?.id || 'Unknown',
+                        email: data.user?.email || 'Unknown',
                         sessionExpires: data.session ? new Date(data.session.expires_at * 1000).toISOString() : 'N/A'
                     });
                 } catch (error) {
@@ -465,17 +530,8 @@
                     }
                     
                     if (!sessionData?.session) {
-                        // Try anonymous sign in
-                        const { data: anonData, error: anonError } = await supabaseClient.auth.signInAnonymously();
-                        
-                        if (anonError) {
-                            throw new Error('Could not sign in anonymously: ' + anonError.message);
-                        }
-                        
-                        showResults('rls-results', {
-                            step1: 'Created anonymous session',
-                            userId: anonData.user?.id
-                        });
+                        // Alert that authentication is needed
+                        throw new Error('No active session found. Please sign in first using the "Sign in with Email" button.');
                     } else {
                         showResults('rls-results', {
                             step1: 'Using existing session',
diff --git a/activities/econ-words/js/auth.js b/activities/econ-words/js/auth.js
index 48a7a04..42cc0bd 100644
--- a/activities/econ-words/js/auth.js
+++ b/activities/econ-words/js/auth.js
@@ -59,26 +59,17 @@ const EconWordsAuth = {
         }
       });
 
-      if (error) {
-        console.error('Error getting auth session:', error);
-        // Try to refresh the session before giving up
-        try {
-          console.log('Attempting to refresh session after error...');
-          const { data: refreshData, error: refreshError } = await supabaseClient.auth.refreshSession();
-          if (!refreshError && refreshData.session) {
-            console.log('Successfully refreshed expired session');
-            await this._setupAuthenticatedUser(refreshData.session.user);
-            return;
-          } else if (refreshError) {
-            console.error('Failed to refresh session:', refreshError);
-          }
-        } catch (refreshError) {
-          console.error('Exception refreshing session:', refreshError);
+      // No session found or error getting session - fall back to guest mode
+      if (!data?.session || error) {
+        if (error) {
+          console.error('Error getting auth session:', error);
+        } else {
+          console.log('No active session found');
         }
+        
+        console.log('No authenticated session available - using guest mode');
         return this._setupGuestMode();
-      }
-
-      if (data && data.session) {
+      } else if (data.session) {
         // User is authenticated
         const { user } = data.session;
         console.log('Found existing session for user:', user.id);
@@ -105,10 +96,6 @@ const EconWordsAuth = {
         }
         
         await this._setupAuthenticatedUser(user);
-      } else {
-        // No session found
-        console.log('No active session found, using guest mode');
-        this._setupGuestMode();
       }
     } catch (error) {
       console.error('Authentication initialization error:', error);
diff --git a/activities/econ-words/js/database.js b/activities/econ-words/js/database.js
index ed2c768..c2527e7 100644
--- a/activities/econ-words/js/database.js
+++ b/activities/econ-words/js/database.js
@@ -69,15 +69,7 @@ const EconWordsDB = {
     try {
       console.log(`Checking if table ${tableName} exists and is accessible...`);
       
-      // Check if we're in guest mode
-      const currentUser = window.EconWordsAuth?.getCurrentUser();
-      if (currentUser?.isGuest) {
-        console.log(`Guest mode detected - assuming table ${tableName} exists without checking`);
-        return true;
-      }
-      
-      // For authenticated users, try a dummy query to test table access
-      // Public access check first
+      // Try a dummy query to test table access
       const { count, error } = await supabaseClient
         .from(tableName)
         .select('*', { count: 'exact', head: true })
@@ -111,13 +103,6 @@ const EconWordsDB = {
       return { success: false, error: 'Supabase client not available' };
     }
     
-    // Check if we're in guest mode
-    const currentUser = window.EconWordsAuth?.getCurrentUser();
-    if (currentUser?.isGuest) {
-      console.log('Guest user detected in _ensureAuth - no need for auth check');
-      return { success: false, error: 'Guest user mode active', isGuest: true };
-    }
-    
     try {
       // Check current session
       const { data, error } = await supabaseClient.auth.getSession();
@@ -165,7 +150,6 @@ const EconWordsDB = {
 
     // Step 1: Get current auth session directly from Supabase
     let authUserId = null;
-    let isGuest = false;
     
     try {
       console.log('Getting auth session for saveScore...');
@@ -173,16 +157,41 @@ const EconWordsDB = {
       
       if (sessionError) {
         console.error('Error getting auth session for saveScore:', sessionError);
+        return this._saveScoreToLocalStorage({
+          user_id: 'local-' + Date.now(),
+          user_name: 'Unknown Player',
+          score: scoreData.score || 0,
+          term: scoreData.term || '',
+          attempts: scoreData.attempts || 0,
+          won: scoreData.won || false,
+          time_taken: scoreData.timeTaken || 0
+        }, scoreData, 'Session error: ' + sessionError.message);
       } else if (sessionData?.session?.user?.id) {
         authUserId = sessionData.session.user.id;
         console.log('Found authenticated user ID:', authUserId);
       } else {
-        console.log('No authenticated session found, will use guest mode');
-        isGuest = true;
+        console.warn('No authenticated session found');
+        return this._saveScoreToLocalStorage({
+          user_id: 'local-' + Date.now(),
+          user_name: 'Unknown Player',
+          score: scoreData.score || 0,
+          term: scoreData.term || '',
+          attempts: scoreData.attempts || 0,
+          won: scoreData.won || false,
+          time_taken: scoreData.timeTaken || 0
+        }, scoreData, 'No active session found');
       }
     } catch (authError) {
       console.error('Exception getting auth session:', authError);
-      isGuest = true;
+      return this._saveScoreToLocalStorage({
+        user_id: 'local-' + Date.now(),
+        user_name: 'Unknown Player',
+        score: scoreData.score || 0,
+        term: scoreData.term || '',
+        attempts: scoreData.attempts || 0,
+        won: scoreData.won || false,
+        time_taken: scoreData.timeTaken || 0
+      }, scoreData, 'Auth exception: ' + authError.message);
     }
     
     // Step 2: Check against EconWordsAuth for consistency
@@ -192,26 +201,21 @@ const EconWordsDB = {
       if (!authUserId) {
         return { success: false, error: 'User not authenticated' };
       }
-    } else {
-      isGuest = currentUser.isGuest;
-      
-      // CRITICAL: Check for user ID mismatch between auth session and currentUser
-      if (authUserId && !isGuest && authUserId !== currentUser.id) {
-        console.error('CRITICAL: Auth user ID mismatch detected!');
-        console.log('Auth session user ID:', authUserId);
-        console.log('EconWordsAuth user ID:', currentUser.id);
-        
-        // Update the currentUser ID to match the auth session (this is crucial for RLS)
-        console.log('Fixing user ID mismatch by using auth session ID');
-        currentUser.id = authUserId;
-      }
+    } else if (authUserId && authUserId !== currentUser.id) {
+      console.error('CRITICAL: Auth user ID mismatch detected!');
+      console.log('Auth session user ID:', authUserId);
+      console.log('EconWordsAuth user ID:', currentUser.id);
+      
+      // Update the currentUser ID to match the auth session (this is crucial for RLS)
+      console.log('Fixing user ID mismatch by using auth session ID');
+      currentUser.id = authUserId;
     }
 
     try {
-      // Step 3: Prepare score record using the correct user ID
+      // Step 3: Prepare score record using the auth user ID
       // IMPORTANT: For authenticated users, we MUST use the auth session user ID to comply with RLS
       const scoreRecord = {
-        user_id: isGuest ? (currentUser?.id || 'guest-' + Date.now()) : authUserId,
+        user_id: authUserId,
         user_name: currentUser?.name || 'Unknown Player',
         score: scoreData.score || 0,
         term: scoreData.term || '',
@@ -220,45 +224,8 @@ const EconWordsDB = {
         time_taken: scoreData.timeTaken || 0,
         section_id: currentUser?.sectionId || null
       };
-
-      // Step 4: For guest users, always use localStorage
-      if (isGuest) {
-        console.log('Guest user detected - saving score to localStorage only');
-        try {
-          const localScoreKey = 'econWordsGuestScores';
-          let guestScores = JSON.parse(localStorage.getItem(localScoreKey) || '[]');
-          const newScore = {
-            ...scoreRecord,
-            id: 'guest-' + Date.now(),
-            created_at: new Date().toISOString()
-          };
-          
-          guestScores.push(newScore);
-          // Keep only the most recent 50 scores
-          if (guestScores.length > 50) guestScores = guestScores.slice(-50);
-          localStorage.setItem(localScoreKey, JSON.stringify(guestScores));
-          console.log('Guest score saved to localStorage');
-          
-          // Update user stats immediately
-          await this._updateUserStats(scoreData);
-          
-          return { 
-            success: true, 
-            data: newScore
-          };
-        } catch (localError) {
-          console.error('Error saving guest score to localStorage:', localError);
-          return { success: false, error: localError.message };
-        }
-      }
       
-      // Step 5: For authenticated users, ensure valid token
-      if (!authUserId) {
-        console.warn('No auth user ID available for database insertion');
-        return this._saveScoreToLocalStorage(scoreRecord, scoreData, 'No auth user ID available');
-      }
-      
-      // Step 6: Try to insert into database with the authenticated user ID
+      // Step 4: Try to insert into database with the authenticated user ID
       console.log('Attempting to save score to database with auth user ID:', authUserId);
       const { data, error } = await supabaseClient
         .from('econ_terms_leaderboard')
@@ -374,7 +341,7 @@ const EconWordsDB = {
     const authStatus = await this._ensureAuth();
     if (!authStatus.success) {
       console.warn('Auth verification failed for score recovery:', authStatus.error);
-      return { success: false, error: 'Authentication required for recovery' };
+      return { success: false, error: 'Authentication required for recovery - Please sign in first' };
     }
     
     try {
@@ -434,15 +401,63 @@ const EconWordsDB = {
       return { success: false, error: 'Database not available' };
     }
 
+    // Step 1: Get current auth session directly from Supabase
+    let authUserId = null;
+    let isGuest = false;
+    
+    try {
+      console.log('Checking auth session for updating stats...');
+      const { data: sessionData, error: sessionError } = await supabaseClient.auth.getSession();
+      
+      if (sessionError || !sessionData?.session?.user?.id) {
+        console.log('No valid auth session for updating stats');
+        isGuest = true;
+      } else {
+        authUserId = sessionData.session.user.id;
+        console.log('Found auth session for stats update with ID:', authUserId);
+      }
+    } catch (e) {
+      console.error('Error checking auth session for stats update:', e);
+      isGuest = true;
+    }
+    
+    // Step 2: Check EconWordsAuth
     const currentUser = window.EconWordsAuth?.getCurrentUser();
     if (!currentUser) {
-      return { success: false, error: 'User not authenticated' };
+      if (!authUserId) {
+        console.error('No user information available for updating stats');
+        return { success: false, error: 'User not authenticated' };
+      }
+    } else {
+      // If EconWordsAuth says guest but we have auth, update EconWordsAuth
+      if (authUserId && currentUser.isGuest && window.EconWordsAuth?._setupAuthenticatedUser) {
+        console.log('Updating EconWordsAuth with new authenticated session');
+        try {
+          const { data } = await supabaseClient.auth.getUser(authUserId);
+          if (data?.user) {
+            await window.EconWordsAuth._setupAuthenticatedUser(data.user);
+            isGuest = false;
+          }
+        } catch (e) {
+          console.error('Error updating EconWordsAuth during stats update:', e);
+        }
+      } else {
+        isGuest = currentUser.isGuest && !authUserId;
+        
+        // Fix mismatch if needed
+        if (authUserId && !isGuest && authUserId !== currentUser.id) {
+          console.warn('User ID mismatch when updating stats:');
+          console.log('Auth ID:', authUserId);
+          console.log('EconWordsAuth ID:', currentUser.id);
+          currentUser.id = authUserId;
+        }
+      }
     }
     
-    // For guest users, store stats in localStorage instead of database
-    // This avoids RLS policy violations
-    if (currentUser.isGuest) {
+    // Step 3: For guest users, store stats in localStorage
+    if (isGuest) {
       try {
+        console.log('Updating guest stats in localStorage');
         // Get existing stats from localStorage
         let localStats = JSON.parse(localStorage.getItem('econWordsGuestStats') || '{}');
         
@@ -453,7 +468,7 @@ const EconWordsDB = {
         
         // Update localStorage
         localStats = {
-          userId: currentUser.id,
+          userId: currentUser?.id || 'guest-user',
           streak: newStreak,
           highScore: newHighScore,
           gamesPlayed: newGamesPlayed,
@@ -470,42 +485,20 @@ const EconWordsDB = {
       }
     }
     
-    // Ensure valid authentication before updating stats
-    const authStatus = await this._ensureAuth();
-    if (!authStatus.success) {
-      console.warn('Auth verification failed for updating stats:', authStatus.error);
-      try {
-        let localStats = JSON.parse(localStorage.getItem('econWordsAuthFallbackStats') || '{}');
-        
-        // Calculate new stats
-        const newStreak = scoreData.won ? (localStats.streak || 0) + 1 : 0;
-        const newHighScore = Math.max(scoreData.score || 0, localStats.highScore || 0);
-        const newGamesPlayed = (localStats.gamesPlayed || 0) + 1;
-        
-        // Update localStorage
-        localStats = {
-          userId: currentUser.id,
-          streak: newStreak,
-          highScore: newHighScore,
-          gamesPlayed: newGamesPlayed,
-          updatedAt: new Date().toISOString()
-        };
-        
-        localStorage.setItem('econWordsAuthFallbackStats', JSON.stringify(localStats));
-        return { success: true };
-      } catch (error) {
-        console.error('Error saving stats to localStorage fallback:', error);
-        return { success: false, error: error.message };
-      }
+    // Step 4: For authenticated users, make sure we have a valid ID
+    const userId = authUserId || currentUser?.id;
+    if (!userId) {
+      console.error('No valid user ID for updating stats in database');
+      return { success: false, error: 'No valid user ID' };
     }
-    
-    // For authenticated users with valid session, continue with database operations
+
     try {
       // Check if user stats record exists
+      console.log('Checking for existing user stats with ID:', userId);
       const { data: existingStats, error: fetchError } = await supabaseClient
-        .from(this.tables.userStats)
+        .from('econ_terms_user_stats')
         .select('*')
-        .eq('user_id', currentUser.id)
+        .eq('user_id', userId)
         .maybeSingle();
 
       if (fetchError) {
@@ -520,8 +513,9 @@ const EconWordsDB = {
 
       if (existingStats) {
         // Update existing record
+        console.log('Updating existing stats record');
         const { error: updateError } = await supabaseClient
-          .from(this.tables.userStats)
+          .from('econ_terms_user_stats')
           .update({
             streak: newStreak,
             high_score: newHighScore,
@@ -534,12 +528,15 @@ const EconWordsDB = {
           console.error('Error updating user stats:', updateError);
           return { success: false, error: updateError.message };
         }
+        
+        console.log('User stats updated successfully');
       } else {
         // Create new record
+        console.log('Creating new stats record');
         const { error: insertError } = await supabaseClient
-          .from(this.tables.userStats)
+          .from('econ_terms_user_stats')
           .insert({
-            user_id: currentUser.id,
+            user_id: userId,
             streak: newStreak,
             high_score: newHighScore,
             games_played: newGamesPlayed
@@ -549,6 +546,8 @@ const EconWordsDB = {
           console.error('Error creating user stats:', insertError);
           return { success: false, error: insertError.message };
         }
+        
+        console.log('New user stats record created successfully');
       }
 
       return { success: true };
@@ -570,18 +569,73 @@ const EconWordsDB = {
       };
     }
 
+    // Check for active session first
+    let authUserId = null;
+    let isGuest = false;
+    
+    try {
+      const { data: sessionData, error: sessionError } = await supabaseClient.auth.getSession();
+      
+      if (sessionError || !sessionData?.session?.user?.id) {
+        // Try to create an anonymous session if we don't have one
+        console.log('No valid session found for getUserStats, attempting anonymous sign-in...');
+        try {
+          const { data: anonData, error: anonError } = await supabaseClient.auth.signInAnonymously();
+          
+          if (anonError) {
+            console.error('Failed to create anonymous session for getUserStats:', anonError);
+            isGuest = true;
+          } else if (anonData?.user?.id) {
+            authUserId = anonData.user.id;
+            console.log('Created anonymous session with ID:', authUserId);
+            
+            // Wait a moment for the session to be fully established
+            await new Promise(resolve => setTimeout(resolve, 300));
+            
+            // Update EconWordsAuth if needed
+            if (window.EconWordsAuth?._setupAuthenticatedUser) {
+              await window.EconWordsAuth._setupAuthenticatedUser(anonData.user);
+            }
+          }
+        } catch (e) {
+          console.error('Exception creating anonymous session:', e);
+          isGuest = true;
+        }
+      } else {
+        authUserId = sessionData.session.user.id;
+        console.log('Found existing session for getUserStats with ID:', authUserId);
+      }
+    } catch (e) {
+      console.error('Error checking session status:', e);
+      isGuest = true;
+    }
+
+    // Check EconWordsAuth for consistency
     const currentUser = window.EconWordsAuth?.getCurrentUser();
     if (!currentUser) {
-      return {
-        highScore: 0,
-        streak: 0,
-        gamesPlayed: 0,
-        rank: '-'
-      };
+      if (!authUserId) {
+        console.error('No user information available for getUserStats');
+        return {
+          highScore: 0,
+          streak: 0,
+          gamesPlayed: 0,
+          rank: 'No User'
+        };
+      }
+    } else {
+      isGuest = currentUser.isGuest && !authUserId;
+      
+      // Fix mismatch between auth and EconWordsAuth if needed
+      if (authUserId && currentUser.id !== authUserId) {
+        console.warn('User ID mismatch in getUserStats:');
+        console.log('Auth session ID:', authUserId);
+        console.log('EconWordsAuth ID:', currentUser.id);
+        currentUser.id = authUserId;
+      }
     }
     
-    // For guest users, always get stats from localStorage
-    if (currentUser.isGuest) {
+    // For guest users, get stats from localStorage
+    if (isGuest) {
       try {
         const localStats = JSON.parse(localStorage.getItem('econWordsGuestStats') || '{}');
         
@@ -602,41 +656,25 @@ const EconWordsDB = {
       }
     }
     
-    // Ensure valid authentication before getting stats
-    const authStatus = await this._ensureAuth();
-    if (!authStatus.success) {
-      console.warn('Auth verification failed for getting stats:', authStatus.error);
-      try {
-        const localStats = JSON.parse(localStorage.getItem('econWordsAuthFallbackStats') || '{}');
-        
-        // Try to recover from auth issues in the background
-        this._recoverFromRLSViolation().then(result => {
-          console.log('Background auth recovery attempt result:', result.success ? 'success' : 'failed');
-        });
-        
-        return {
-          highScore: localStats.highScore || 0,
-          streak: localStats.streak || 0,
-          gamesPlayed: localStats.gamesPlayed || 0,
-          rank: 'Auth-Pending'
-        };
-      } catch (error) {
-        console.error('Error reading auth fallback stats from localStorage:', error);
+    try {
+      // Make sure we have a valid user ID for the query
+      const userId = authUserId || currentUser?.id;
+      if (!userId) {
+        console.error('No valid user ID for database query');
         return {
-          highScore: 0,
+          highScore: 0, 
           streak: 0,
           gamesPlayed: 0,
-          rank: '-'
+          rank: 'No ID'
         };
       }
-    }
-
-    try {
+      
       // Get user stats with verified auth session
+      console.log('Querying user stats for ID:', userId);
       const { data: stats, error } = await supabaseClient
-        .from(this.tables.userStats)
+        .from('econ_terms_user_stats')
         .select('*')
-        .eq('user_id', currentUser.id)
+        .eq('user_id', userId)
         .maybeSingle();
 
       if (error) {
@@ -645,7 +683,7 @@ const EconWordsDB = {
         // Handle RLS policy violations
         if (error.code === '42501' || error.message.includes('policy')) {
           console.warn('RLS policy violation when getting stats - attempting recovery');
-          this._recoverFromRLSViolation();
+          await this._recoverFromRLSViolation();
         }
         
         try {
@@ -668,9 +706,45 @@ const EconWordsDB = {
         };
       }
 
+      // Create stats if they don't exist
+      if (!stats) {
+        console.log('No stats found for user, creating new record');
+        try {
+          const newStats = {
+            user_id: userId,
+            high_score: 0,
+            streak: 0,
+            games_played: 0
+          };
+          
+          const { error: insertError } = await supabaseClient
+            .from('econ_terms_user_stats')
+            .insert(newStats);
+            
+          if (insertError) {
+            console.error('Error creating new user stats:', insertError);
+          }
+          
+          return {
+            highScore: 0,
+            streak: 0,
+            gamesPlayed: 0,
+            rank: 'New'
+          };
+        } catch (e) {
+          console.error('Exception creating new user stats:', e);
+          return {
+            highScore: 0,
+            streak: 0,
+            gamesPlayed: 0,
+            rank: 'Error'
+          };
+        }
+      }
+
       // Get user rank by getting count of users with higher scores
       const { count, error: rankError } = await supabaseClient
-        .from(this.tables.userStats)
+        .from('econ_terms_user_stats')
         .select('*', { count: 'exact' })
         .gt('high_score', stats?.high_score || 0);
 
diff --git a/activities/econ-words/js/local-env.js b/activities/econ-words/js/local-env.js
new file mode 100644
index 0000000..4ba0617
--- /dev/null
+++ b/activities/econ-words/js/local-env.js
@@ -0,0 +1,15 @@
+/**
+ * Local Environment Configuration for Econ Words Game
+ * 
+ * This file provides the Supabase credentials when the main env.js isn't available
+ */
+
+// Use the same credentials as the main env.js
+const supabaseUrl = 'https://bvvkevmqnnlecghyraao.supabase.co';
+const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJ2dmtldm1xbm5sZWNnaHlyYWFvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MDAzNDEsImV4cCI6MjA2MDQ3NjM0MX0.UY_H91jIbbZWq6A-l7XbdyF6s3rSoBVcJfawhZ2CyVg';
+
+// Make these available as window variables
+window.supabaseUrl = supabaseUrl;
+window.supabaseKey = supabaseKey;
+
+console.log('Local environment loaded for Econ Words game');
diff --git a/activities/econ-words/js/supabase-diagnostics.js b/activities/econ-words/js/supabase-diagnostics.js
index 8698211..a1b5e7e 100644
--- a/activities/econ-words/js/supabase-diagnostics.js
+++ b/activities/econ-words/js/supabase-diagnostics.js
@@ -162,7 +162,7 @@ const SupabaseDiagnostics = {
     
     // Determine overall success
     results.success = results.clientInitialized && 
-                     (results.authStatus?.authenticated || window.EconWordsAuth?.isGuest) &&
+                     results.authStatus?.authenticated &&
                      Object.values(results.tableAccess).some(access => access.accessible);
     
     console.log('Overall diagnosis:', results.success ? 'PASS' : 'FAIL');
@@ -212,6 +212,67 @@ const SupabaseDiagnostics = {
       region: "Unknown (not accessible via client)",
       capabilities: ["Authentication", "Database", "Storage", "Edge Functions", "Realtime"]
     };
+  },
+  
+  // Test authentication (renamed from testAnonymousAuth)
+  testAuthentication: async function() {
+    console.log('======= TESTING AUTHENTICATION =======');
+    
+    if (!window.supabaseClient) {
+      console.error('FAIL: Supabase client is not initialized');
+      return {
+        success: false,
+        error: 'Supabase client not available'
+      };
+    }
+    
+    // Check current session
+    try {
+      console.log('Checking current session...');
+      const { data: sessionData, error: sessionError } = await supabaseClient.auth.getSession();
+      
+      if (sessionError) {
+        console.error('Error getting current session:', sessionError);
+        return {
+          success: false,
+          error: sessionError.message,
+          hasExistingSession: false
+        };
+      } else if (sessionData?.session) {
+        console.log('Session already exists with user ID:', sessionData.session.user.id);
+        console.log('Session expires at:', new Date(sessionData.session.expires_at * 1000).toISOString());
+        
+        // Test token refresh
+        console.log('Testing token refresh...');
+        const { data: refreshData, error: refreshError } = await supabaseClient.auth.refreshSession();
+        
+        if (refreshError) {
+          console.warn('Token refresh test failed:', refreshError);
+        } else if (refreshData?.session) {
+          console.log('Token refresh successful');
+        }
+        
+        return {
+          success: true,
+          hasExistingSession: true,
+          userId: sessionData.session.user.id,
+          expiresAt: new Date(sessionData.session.expires_at * 1000).toISOString()
+        };
+      } else {
+        console.log('No active session found');
+        return {
+          success: false,
+          error: 'No active session found. Please sign in first.',
+          hasExistingSession: false
+        };
+      }
+    } catch (error) {
+      console.error('FAIL: Exception during auth test:', error);
+      return {
+        success: false,
+        error: error.message
+      };
+    }
   }
 };
 
diff --git a/activities/econ-words/js/supabase-init.js b/activities/econ-words/js/supabase-init.js
new file mode 100644
index 0000000..91545b8
--- /dev/null
+++ b/activities/econ-words/js/supabase-init.js
@@ -0,0 +1,252 @@
+/**
+ * Supabase Integration for Econ Words Game
+ * This file handles the Supabase initialization for the Econ Words game
+ */
+
+// Initialize Supabase client
+(function() {
+    try {
+        // If Supabase isn't already initialized, do it now
+        if (!window.supabase) {
+            if (!window.supabaseUrl || !window.supabaseKey) {
+                console.error('Supabase credentials not found. Make sure env.js or local-env.js has loaded properly.');
+                throw new Error('Missing Supabase credentials');
+            }
+            
+            console.log('Initializing Supabase client for Econ Words game');
+            window.supabase = supabase.createClient(window.supabaseUrl, window.supabaseKey);
+            console.log('Supabase client initialized successfully');
+        }
+        
+        // Test the connection to Supabase
+        window.supabase.from('econ_terms_leaderboard')
+            .select('count(*)', { count: 'exact', head: true })
+            .then(response => {
+                if (response.error) {
+                    console.error('Failed to connect to Supabase:', response.error);
+                    enableOfflineMode('Table connection failed');
+                } else {
+                    console.log('Successfully connected to Supabase econ_terms_leaderboard table');
+                    disableOfflineMode();
+                }
+            })
+            .catch(error => {
+                console.error('Error testing Supabase connection:', error);
+                enableOfflineMode('Connection test error');
+            });
+    } catch (error) {
+        console.error('Error initializing Supabase client:', error);
+        enableOfflineMode('Initialization error');
+    }
+})();
+
+// Function to enable offline mode
+function enableOfflineMode(reason) {
+    console.warn(`Enabling offline mode for Econ Words game. Reason: ${reason}`);
+    localStorage.setItem('econ_words_offline_mode', 'true');
+    
+    // Dispatch an event so other scripts know we're in offline mode
+    window.dispatchEvent(new CustomEvent('econwords:offline_mode', { detail: { reason } }));
+}
+
+// Function to disable offline mode
+function disableOfflineMode() {
+    console.log('Disabling offline mode for Econ Words game');
+    localStorage.removeItem('econ_words_offline_mode');
+    
+    // Dispatch an event so other scripts know we're online
+    window.dispatchEvent(new CustomEvent('econwords:online_mode'));
+}
+
+// Simplified Supabase integration object for Econ Words game
+window.SupabaseEconTerms = {
+    // Tables configuration
+    tables: {
+        leaderboard: 'econ_terms_leaderboard',
+        userStats: 'econ_terms_user_stats'
+    },
+    
+    // Helper method to get authenticated user ID 
+    getAuthUserId: async function() {
+        try {
+            if (!window.supabase) {
+                return null;
+            }
+            
+            const { data, error } = await window.supabase.auth.getSession();
+            if (error || !data.session) {
+                return null;
+            }
+            
+            return data.session.user.id;
+        } catch (error) {
+            console.error('Error getting auth user ID:', error);
+            return null;
+        }
+    },
+    
+    // Method to submit score to leaderboard
+    submitScore: async function(scoreData) {
+        if (!window.supabase || localStorage.getItem('econ_words_offline_mode') === 'true') {
+            console.log('Operating in offline mode. Score will be stored locally.');
+            this.saveLocalScore(scoreData);
+            return { success: true, offline: true };
+        }
+        
+        try {
+            const { data, error } = await window.supabase
+                .from(this.tables.leaderboard)
+                .insert([scoreData])
+                .select();
+                
+            if (error) {
+                console.error('Error submitting score:', error);
+                this.saveLocalScore(scoreData);
+                return { success: false, error, offline: true };
+            }
+            
+            console.log('Score submitted successfully:', data);
+            return { success: true, data };
+        } catch (error) {
+            console.error('Exception submitting score:', error);
+            this.saveLocalScore(scoreData);
+            return { success: false, error, offline: true };
+        }
+    },
+    
+    // Method to update user stats
+    updateUserStats: async function(userId, stats) {
+        if (!window.supabase || localStorage.getItem('econ_words_offline_mode') === 'true') {
+            console.log('Operating in offline mode. Stats will be stored locally.');
+            this.saveLocalStats(userId, stats);
+            return { success: true, offline: true };
+        }
+        
+        try {
+            // Check if user stats exist
+            const { data: existingStats, error: checkError } = await window.supabase
+                .from(this.tables.userStats)
+                .select('*')
+                .eq('user_id', userId)
+                .maybeSingle();
+                
+            if (checkError) {
+                console.error('Error checking user stats:', checkError);
+                this.saveLocalStats(userId, stats);
+                return { success: false, error: checkError, offline: true };
+            }
+            
+            if (existingStats) {
+                // Update existing stats
+                const { data, error } = await window.supabase
+                    .from(this.tables.userStats)
+                    .update(stats)
+                    .eq('user_id', userId)
+                    .select();
+                    
+                if (error) {
+                    console.error('Error updating user stats:', error);
+                    this.saveLocalStats(userId, stats);
+                    return { success: false, error, offline: true };
+                }
+                
+                return { success: true, data };
+            } else {
+                // Insert new stats
+                const { data, error } = await window.supabase
+                    .from(this.tables.userStats)
+                    .insert([{ user_id: userId, ...stats }])
+                    .select();
+                    
+                if (error) {
+                    console.error('Error inserting user stats:', error);
+                    this.saveLocalStats(userId, stats);
+                    return { success: false, error, offline: true };
+                }
+                
+                return { success: true, data };
+            }
+        } catch (error) {
+            console.error('Exception updating user stats:', error);
+            this.saveLocalStats(userId, stats);
+            return { success: false, error, offline: true };
+        }
+    },
+    
+    // Method to get user stats
+    getUserStats: async function(userId) {
+        // Try to get from local storage first
+        const localStats = this.getLocalStats(userId);
+        
+        if (!window.supabase || localStorage.getItem('econ_words_offline_mode') === 'true') {
+            console.log('Operating in offline mode. Using local stats.');
+            return localStats;
+        }
+        
+        try {
+            const { data, error } = await window.supabase
+                .from(this.tables.userStats)
+                .select('*')
+                .eq('user_id', userId)
+                .maybeSingle();
+                
+            if (error) {
+                console.error('Error getting user stats:', error);
+                return localStats;
+            }
+            
+            if (!data) {
+                console.log('No user stats found. Using local stats.');
+                return localStats;
+            }
+            
+            // Merge with local stats if local stats have higher values
+            if (localStats) {
+                const mergedStats = {
+                    ...data,
+                    streak: Math.max(data.streak, localStats.streak || 0),
+                    high_score: Math.max(data.high_score, localStats.high_score || 0),
+                    games_played: Math.max(data.games_played, localStats.games_played || 0)
+                };
+                
+                return mergedStats;
+            }
+            
+            return data;
+        } catch (error) {
+            console.error('Exception getting user stats:', error);
+            return localStats;
+        }
+    },
+    
+    // Method to save score locally
+    saveLocalScore: function(scoreData) {
+        try {
+            const localScores = JSON.parse(localStorage.getItem('econ_words_scores') || '[]');
+            localScores.push({ ...scoreData, created_at: new Date().toISOString() });
+            localStorage.setItem('econ_words_scores', JSON.stringify(localScores));
+        } catch (error) {
+            console.error('Error saving local score:', error);
+        }
+    },
+    
+    // Method to save stats locally
+    saveLocalStats: function(userId, stats) {
+        try {
+            localStorage.setItem(`econ_words_stats_${userId}`, JSON.stringify(stats));
+        } catch (error) {
+            console.error('Error saving local stats:', error);
+        }
+    },
+    
+    // Method to get stats locally
+    getLocalStats: function(userId) {
+        try {
+            const statsString = localStorage.getItem(`econ_words_stats_${userId}`);
+            return statsString ? JSON.parse(statsString) : null;
+        } catch (error) {
+            console.error('Error getting local stats:', error);
+            return null;
+        }
+    }
+};
-- 
2.39.5 (Apple Git-154)

